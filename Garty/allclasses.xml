<haxe>
	<class path="Array" params="T" file="C:\code\haxe/std/Array.hx" extern="1">
		<filter public="1" set="method"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="Array.T"/></c>
</f></filter>
		<map public="1" params="S" set="method"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of [this] Array.
		
		The elements are not copied and retain their identity, so
		a[i] == a.copy()[i] is true for any valid i. However, a == a.copy() is
		always false.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x] in [this] Array.
		
		This operation modifies [this] Array in place.
		
		If [x] is found by checking standard equality, it is removed from [this]
		Array and all following elements are reindexed acoordingly. The function
		then returns true.
		
		If [x] is not found, [this] Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		
		This operation modifies [this] Array in place.
		
		The offset is calculated like so:
			
		- If [pos] exceeds [this].length, the offset is [this].length.
		- If [pos] is negative, the offset is calculated from the end of [this]
		Array, i.e. [this].length + [pos]. If this yields a negative value,
		the offset is 0.
		- Otherwise, the offset is [pos].
		
		If the resulting offset does not exceed [this].length, all elements from
		and including that offset to the end of [this] Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of [this] Array.
		
		This operation modifies [this] Array in place.
		
		[this].length and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of [this] Array.
		
		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes [len] elements from [this] Array, starting at and including
		[pos], an returns them.
		
		This operation modifies [this] Array in place.
		
		If [len] is < 0 or [pos] exceeds [this].length, the result is the empty
		Array [].
		
		If [pos] is negative, its value is calculated from the end	of [this]
		Array by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.
		
		If the sum of the resulting values for [len] and [pos] exceed
		[this].length, this operation will affect the elements from [pos] to the
		end of [this] Array.
		
		The length of the returned Array is equal to the new length of [this]
		Array subtracted from the original length of [this] Array. In other
		words, each element of the original [this] Array either remains in
		[this] Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts [this] Array according to the comparison function [f], where
		[f(x,y)] returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.
		
		This operation modifies [this] Array in place.
		
		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, haxe.ds.sort.MergeSort.sort() can be used instead.
		
		If [f] is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of [this] Array, starting at and
		including [pos], up to but not including [end].
		
		This operation does not modify [this] Array.
		
		The elements are not copied and retain their identity.
		
		If [end] is omitted or exceeds [this].length, it defaults to the end of
		[this] Array.
		
		If [pos] or [end] are negative, their offsets are calculated from the
		end	of [this] Array by [this].length + [pos] and [this].length + [end]
		respectively. If this yields a negative value, 0 is used instead.
		
		If [pos] exceeds [this].length or if [end} exceeds or equals [pos],
		the result is [].</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of [this] Array and returns it.
		
		This operation modifies [this] Array in place.
		
		If [this] has at least one element, [this].length and the index of each
		remaining element is decreased by 1.
		
		If [this] is the empty Array [], null is returned and the length remains
		0.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of [this] Array.
		
		This operation modifies [this] Array in place.
		
		If [this].length < 2, [this] remains unchanged.]]></haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of [this] Array and returns the offset
		it was added at.
		
		This operation modifies [this] Array in place.
		
		[this].length increases by 1.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of [this] Array and returns it.
		
		This operation modifies [this] Array in place.
		
		If [this] has at least one element, [this].length will decrease by 1.
		
		If [this] is the empty Array [], null is returned and the length remains
		0.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of [this] Array, with [sep] separating
		each element.
		
		The result of this operation is equal to Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1]).
		
		If [this] is the empty Array [], the result is the empty String "". If
		[this] has exactly one element, the result is equal to a call to
		Std.string(this[0]).
		
		If [sep] is null, the result is unspecified.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of [a] to the elements of
		[this] Array.
		
		This operation does not modify [this] Array.
		
		If [a] is the empty Array [], a copy of [this] Array is returned.
		
		The length of the returned Array is equal to the sum of [this].length
		and [a].length.
		
		If [a] is null, the result is unspecified.</haxe_doc>
		</concat>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of [this] Array.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="C:\code\haxe/std/Class.hx">
		<haxe_doc>An abstract type that represents a Class.
	
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\code\haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp [t].</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string [s], with the following accepted
		formats:
			- [YYYY-MM-DD hh:mm:ss]
			- [YYYY-MM-DD]
			- [hh:mm:ss]
		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of [this] Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.</haxe_doc>
		</toString>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of [this] Date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of [this] Date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of [this] Date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of [this] Date (4-digits).</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the [this] Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of [this] Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of [this] Date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.
		
		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.
			- month: 0 to 11
			- day: 1 to 31
			- hour: 0 to 23
			- min: 0 to 59
			- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by
		- new Date() for a specific date,
		- Date.now() to obtain information about the current time,
		- Date.fromTime() with a given timestamp or
		- Date.fromString() by parsing from a String.
	
	There is some extra functions available in the [DateTools] class.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="C:\code\haxe/std/flash/_std/EReg.hx">
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group [n] of [this] EReg.
		
		This method should only be called after [this].match() or
		[this].matchSub(), and then operates on the String of that operation.
		
		The index [n] corresponds to the n-th set of parentheses in the pattern
		of [this] EReg. If no such sub-group exists, an exception is thrown.
		
		If [n] equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [this] regular expression matches String [s].
		
		This method modifies the internal state.
		
		If [s] is null, the result is unspecified.</haxe_doc>
		</match>
		<result><c path="+Array"/></result>
		<r><c path="flash.utils.RegExp"/></r>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern [r] and modifiers [opt].
		
		This is equivalent to the shorthand syntax ~/r/opt
		
		If [r] or [opt] are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.
	
	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.
	
	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier
	
	EReg instances maintain an internal state, which is affected by several of
	its methods.
	
	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\code\haxe/std/Enum.hx">
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is EnumValue.
	
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\code\haxe/std/EnumValue.hx">
		<haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="C:\code\haxe/std/Lambda.hx">
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [it] contains [elt].
		
		This function returns true as soon as an element is found which is equal
		to [elt] according to the [==] operator.
		
		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [it] contains an element for which [f] is true.
		
		This function returns true as soon as an element is found for which a
		call to [f] returns true.
		
		If no such element is found, the result is false.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</exists>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element [v] within Iterable [it].
		
		This function uses operator [==] to check for equality.
		
		If [v] does not exist in [it], the result is -1.</haxe_doc>
		</indexOf>
		<haxe_doc>The [Lambda] class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.
	
	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.
	
	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="C:\code\haxe/std/List.hx">
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [v] in [this] List.
		
		If [v] is found by checking standard equality, it is removed from [this]
		List and the function returns true.
		
		Otherwise, false is returned.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties [this] List.
		
		This function does not traverse the elements, but simply sets the
		internal references to null and [this].length to 0.</haxe_doc>
		</clear>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if [this] List is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of [this] List, or null if no elements exist.
		
		The element is removed from [this] List.</haxe_doc>
		</pop>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of [this] List, or null if no elements exist.
		
		This function does not modify [this] List.</haxe_doc>
		</last>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of [this] List, or null if no elements exist.
		
		This function does not modify [this] List.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element [item] at the beginning of [this] List.
		
		[this].length increases by 1.</haxe_doc>
		</push>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element [item] at the end of [this] List.
		
		[this].length increases by 1.</haxe_doc>
		</add>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of [this] List.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Main" params="" file="src/Main.hx"><main set="method" line="30" static="1">
	<f a=""><x path="Void"/></f>
	<meta><m n=":keep"/></meta>
</main></class>
	<abstract path="Map" params="K:V" file="C:\code\haxe/std/Map.hx">
		<from>
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
		</from>
		<to>
			<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
			<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.
		
	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.
	
	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.
	
	Maps can also be created with [key1 => value1, key2 => value2] syntax.
	
	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"/></meta>
	</abstract>
	<class path="IMap" params="K:V" file="C:\code\haxe/std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="C:\code\haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="C:\code\haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of -1.0 / 0.0.
		
		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of 1.0 / 0.0.
		
		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
	
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.
		
		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).
		
		All further operations with NaN as an operand will result in NaN.
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.
		
		In order to test if a value is NaN, you should use Math.isNaN() function.
		
		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of [v].
		
		If [v] is positive or 0, the result is unchanged. Otherwise the result
		is -[v].
		
		If [v] is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.
		
		If [v] is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values [a] and [b].
		
		If [a] or [b] are NaN, the result is NaN.
		
		If [a] or [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		
		If [a] and [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values [a] and [b].
		
		If [a] or [b] are NaN, the result is NaN.
		
		If [a] or [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [a] and [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of [v].
		
		The unit of [v] is radians.
		
		If [v] is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of [v].
		
		The unit of [v] is radians.
		
		If [v] is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of [v].
		
		exp(1.0) is approximately 2.718281828459.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is NEGATIVE_INFINITY, the result is 0.0.
		
		If [v] is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of [v].
		
		If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is 0.0, the result is NEGATIVE_INFINITY.
		
		This is the inverse operation of exp, i.e. log(exp(v)) == v always
		holds.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of [v].
		
		If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds [v] to the nearest Int value.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than [v].
		
		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.		
		
		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than [v].

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [f] is a finite number.
		
		If [f] is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
		false.
		
		Otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [f] is not a valid number.
		
		If [f] is NaN, the result is true.
		
		Otherwise the result is false. In particular, both POSITIVE_INFINITY and
		NEGATIVE_INFINITY are not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\code\haxe/std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure [o] has a field named [field].
		
		This is only guaranteed to work for anonymous structures. Refer to
		[Type.getInstanceFields] for a function supporting class instances.
		
		If [o] or [field] are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named [field] on object [o].
		
		If [o] is not an object or has no field named [field], the result is
		null.
		
		If the field is defined as a property, its accessors are ignored. Refer
		to [Reflect.getProperty] for a function supporting property accessors.
		
		If [field] is null, the result is unspecified.
		
		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named [field] on object [o], taking
		property getter functions into account.
		
		If the field is not a property, this function behaves like
		[Reflect.field], but might be slower.
		
		If [o] or [field] are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named [field] of object [o] to value [value], taking
		property setter functions into account.
		
		If the field is not a property, this function behaves like
		[Reflect.setField], but might be slower.
		
		If [field] is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure [o].
		
		This method is only guaranteed to work on anonymous structures. Refer to
		[Type.getInstanceFields()] for a function supporting class instances.
		
		If [o] is null, the result is unspecified.</haxe_doc>
		</fields>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\code\haxe/std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="30" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If s is of String, Int, Float or Bool, its value is returned.

		If s is an instance of a class and that class or one of its parent classes has
		a toString() method, that method is called. If no such method is present, the result
		is unspecified.

		If s is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If s is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="38" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a String to an Int.

		Leading whitespaces are ignored.

		If x starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise x is read as decimal number with 0-9 being allowed characters. x may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="45" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a String to a Float.

		The parsing rules for parseInt() apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single . to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="49" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and x excluded.

		If x is <= 1, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<to><x path="Float"/></to>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="UInt" params="" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<from><x path="Int"/></from>
		<to><x path="Int"/></to>
		<haxe_doc>The unsigned Int type is only defined for Flash9. It's currently
	handled the same as a normal Int.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\code\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\code\haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code [code].
		
		If [code] is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of [this] String from [startIndex] to [endIndex].
		
		If [startIndex] or [endIndex] are negative, 0 is used instead.
		
		If [startIndex] exceeds [endIndex], they are swapped.
		
		If the (possibly swapped) [endIndex] is omitted or exceeds
		[this].length, [this].length is used instead.
		
		If the (possibly swapped) [startIndex] exceeds [this].length, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns [len] characters of [this] String, starting at position [pos].
		
		If [len] is omitted, all characters from position [pos] to the end of
		[this] String are included.
		
		If [pos] is negative, its value is calculated from the end of [this]
		String by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + [len] exceeds [this].length, the characters
		from that position to the end of [this] String are returned.
		
		If [len] is negative, the result is unspecified.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits [this] String at each occurence of [delimiter].
		
		If [delimiter] is the empty String "", [this] String is split into an
		Array of [this].length elements, where the elements correspond to the
		characters of [this] String.
		
		If [delimiter] is not found within [this] String, the result is an Array
		with one element, which equals [this] String.
		
		If [delimiter] is null, the result is unspecified.
		
		Otherwise, [this] String is split into parts at each occurence of
		[delimiter]. If [this] String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of [str] within [this]
		String.
		
		If [startIndex] is given, the search is performed within the substring
		of [this] String from 0 to [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.
		
		If [str] cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of [str] within [this]
		String.
		
		If [startIndex] is given, the search is performed within the substring
		of [this] String starting from [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.
		
		If [str] cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position [index] of [this] String.
		
		If [index] is negative or exceeds [this].length, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position [index] of [this] String.
		
		If [index] is negative or exceeds [this].length, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of [this] String are lower case.
		
		Affects the characters [A-Z]. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of [this] String are upper case.
		
		Affects the characters [a-z]. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in [this] String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of [this] String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\code\haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\code\haxe/std/StringTools.hx">
		<isSpace public="1" set="method" line="162" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string [s] at position [pos] is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If [s] is the empty String "", or if pos is not a valid position within
		[s], the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="176" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of [s].

		This function internally calls isSpace() to decide which characters to
		remove.

		If [s] is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="201" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of [s].

		This function internally calls isSpace() to decide which characters to
		remove.

		If [s] is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="223" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of [s].

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="ValueType" params="" file="C:\code\haxe/std/flash/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\code\haxe/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of [o], if [o] is a class instance.
		
		If [o] is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getClassName public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class [c], including its path.
		
		If [c] is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
			pack1.pack2.(...).packN.ClassName
		If [c] is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If [c] has no package, the class name is returned.
		
		If [c] is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<resolveClass public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If [name] is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If [name] is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="113" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.
		
		If [name] is the path of an existing enum, that enum is returned.
		
		Otherwise null is returned.
		
		If [name] is null the result is unspecified.
		
		If [name] is the path to a different type, null is returned.
		
		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class [cl], using [args] as arguments to the
		class constructor.
		
		This function guarantees that the class constructor is called.
		
		Default values of constructors arguments are not guaranteed to be
		taken into account.
		
		If [cl] or [args] are null, or if the number of elements in [args] does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if [cl] has no own constructor, the
		result is unspecified.
		
		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<typeof public="1" set="method" line="215" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value [v].
		
		The result corresponds to the type [v] has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="XmlType" params="" file="C:\code\haxe/std/flash/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="C:\code\haxe/std/flash/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="45" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<compare set="method" line="67" static="1">
			<f a="a:b">
				<c path="Xml"/>
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<getNodeType set="method" line="104" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
</f></getNodeType>
		<wrap set="method" line="180" static="1"><f a="node:?type">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
	<c path="Xml"/>
</f></wrap>
		<toString public="1" set="method" line="389">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<firstElement public="1" set="method" line="348">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<elementsNamed public="1" set="method" line="314">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<elements public="1" set="method" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<iterator public="1" set="method" line="282">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<exists public="1" set="method" line="255">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<get public="1" set="method" line="207">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<getAttribNS set="method" line="194"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<wraps set="method" line="187"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="Xml"/></c>
</f></wraps>
		<get_nodeValue set="method" line="140"><f a=""><c path="String"/></f></get_nodeValue>
		<get_nodeName set="method" line="120"><f a=""><c path="String"/></f></get_nodeName>
		<_node><c path="flash.xml.XML"/></_node>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<new set="method" line="71"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="com.artemisx.Aspect" params="" file="../../artemis-haxelib/src/com/artemisx/Aspect.hx">
		<getAspectForAll public="1" get="inline" set="null" line="70" static="1"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></getAspectForAll>
		<getAspectForOne public="1" get="inline" set="null" line="77" static="1"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></getAspectForOne>
		<getAspectFromBits public="1" get="inline" set="null" line="84" static="1"><f a="bits">
	<c path="com.artemisx.utils.Bitset"/>
	<c path="com.artemisx.Aspect"/>
</f></getAspectFromBits>
		<matches public="1" set="method" line="91" static="1"><f a="signature:componentBits">
	<c path="com.artemisx.Aspect"/>
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></matches>
		<fufills public="1" set="method" line="137" static="1"><f a="aspect:fufiller">
	<c path="com.artemisx.Aspect"/>
	<c path="com.artemisx.Aspect"/>
	<x path="Bool"/>
</f></fufills>
		<getEmpty public="1" get="inline" set="null" line="183" static="1"><f a=""><c path="com.artemisx.Aspect"/></f></getEmpty>
		<equals public="1" set="method" line="179"><f a="v">
	<c path="com.artemisx.Aspect"/>
	<x path="Bool"/>
</f></equals>
		<one public="1" set="method" line="60"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></one>
		<exclude public="1" set="method" line="50"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></exclude>
		<all public="1" set="method" line="40"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></all>
		<get_oneSet get="inline" set="null" line="36"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_oneSet>
		<get_exclusionSet get="inline" set="null" line="35"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_exclusionSet>
		<get_allSet get="inline" set="null" line="34"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_allSet>
		<oneSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</oneSet>
		<exclusionSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</exclusionSet>
		<allSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</allSet>
		<new set="method" line="27"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Used by Systems to match against groups of entities.
 * This may be conceptually difficult to understand, so read
 * Ari's comments about it here:
 *
 *    http://gamadu.com/artemisx/manual.html#Aspect
 *    http://gamadu.com/artemisx/javadoc/com/artemis/Aspect.html
 *
 * originally written by Arni Arent
 * ported to HaXe by Lewen Yu and Harry</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Component" params="" file="../../artemis-haxelib/src/com/artemisx/Component.hx" interface="1"/>
	<class path="com.artemisx.EntityObserver" params="" file="../../artemis-haxelib/src/com/artemisx/EntityObserver.hx" interface="1">
		<onDisabled public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onEnabled public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDeleted public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onChanged public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onAdded public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<haxe_doc>*
 * The EntityObserver interface. Used for subscribing/listening to entity events
 *  originally written by Arni Arent
 *  ported to HaXe by Lewen Yu and Harry
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Manager" params="" file="../../artemis-haxelib/src/com/artemisx/Manager.hx">
		<implements path="com.artemisx.EntityObserver"/>
		<onEnabled public="1" set="method" line="26"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDisabled public="1" set="method" line="24"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onDeleted public="1" set="method" line="22"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onChanged public="1" set="method" line="20"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onAdded public="1" set="method" line="18"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<initialize set="method" line="16"><f a=""><x path="Void"/></f></initialize>
		<world>
			<c path="com.artemisx.World"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<haxe_doc>*
 * The Manager class.
 *  originally written by Arni Arent
 *  ported to HaXe by Lewen Yu and Harry
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.ComponentManager" params="" file="../../artemis-haxelib/src/com/artemisx/ComponentManager.hx">
		<extends path="com.artemisx.Manager"/>
		<onDeleted public="1" set="method" line="97" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<clean set="method" line="87"><f a=""><x path="Void"/></f></clean>
		<getComponentsFor public="1" get="inline" set="null" line="75"><f a="e:fillBag">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
</f></getComponentsFor>
		<getComponent get="inline" set="null" line="65"><f a="e:type">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
</f></getComponent>
		<getComponentsByType get="inline" set="null" line="55"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
</f></getComponentsByType>
		<removeComponent get="inline" set="null" line="47"><f a="e:type">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<x path="Void"/>
</f></removeComponent>
		<addComponent get="inline" set="null" line="33"><f a="e:type:component">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
	<x path="Void"/>
</f></addComponent>
		<removeComponentsOfEntity get="inline" set="null" line="20"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></removeComponentsOfEntity>
		<initialize set="method" line="18" override="1"><f a=""><x path="Void"/></f></initialize>
		<deleted><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></deleted>
		<componentsByType><c path="com.artemisx.utils.Bag"><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c></c></componentsByType>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.ComponentMapper" params="A" file="../../artemis-haxelib/src/com/artemisx/ComponentMapper.hx">
		<getFor public="1" params="T" set="method" line="14" static="1"><f a="type:world">
	<x path="Class"><c path="getFor.T"/></x>
	<c path="com.artemisx.World"/>
	<c path="com.artemisx.ComponentMapper"><c path="getFor.T"/></c>
</f></getFor>
		<has public="1" get="inline" set="null" line="38"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
</f></has>
		<getSafe public="1" get="inline" set="null" line="29"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentMapper.A"/>
</f></getSafe>
		<get public="1" get="inline" set="null" line="27"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentMapper.A"/>
</f></get>
		<components><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c></components>
		<classType><x path="Class"><c path="com.artemisx.ComponentMapper.A"/></x></classType>
		<type><c path="com.artemisx.ComponentType"/></type>
		<new set="method" line="19"><f a="type:world">
	<x path="Class"><c path="com.artemisx.ComponentMapper.A"/></x>
	<c path="com.artemisx.World"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.utils.ClassHash" params="V" file="../../artemis-haxelib/src/com/artemisx/utils/ClassHash.hx">
		<mymap params="A:B" get="inline" set="null" line="56" static="1"><f a="it:f">
	<t path="Iterator"><c path="mymap.A"/></t>
	<f a="">
		<c path="mymap.A"/>
		<c path="mymap.B"/>
	</f>
	<t path="Iterator"><c path="mymap.B"/></t>
</f></mymap>
		<toString public="1" get="inline" set="null" line="50"><f a=""><c path="String"/></f></toString>
		<iterator public="1" get="inline" set="null" line="45"><f a=""><t path="Iterator"><c path="com.artemisx.utils.ClassHash.V"/></t></f></iterator>
		<keys public="1" get="inline" set="null" line="39"><f a=""><t path="Iterator"><x path="Class"><d/></x></t></f></keys>
		<remove public="1" get="inline" set="null" line="34"><f a="key">
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></remove>
		<exists public="1" get="inline" set="null" line="29"><f a="key">
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></exists>
		<get public="1" get="inline" set="null" line="24"><f a="key">
	<x path="Class"><d/></x>
	<t path="Null"><c path="com.artemisx.utils.ClassHash.V"/></t>
</f></get>
		<set public="1" get="inline" set="null" line="19"><f a="key:value">
	<x path="Class"><d/></x>
	<c path="com.artemisx.utils.ClassHash.V"/>
	<x path="Void"/>
</f></set>
		<map><c path="haxe.ds.StringMap"><c path="com.artemisx.utils.ClassHash.V"/></c></map>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\code\haxe/std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<toString public="1" set="method" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><c path="flash.utils.Dictionary"/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="flash.utils.Dictionary" params="" file="C:\code\haxe/std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="com.artemisx.ComponentType" params="" file="../../artemis-haxelib/src/com/artemisx/ComponentType.hx">
		<getIndexFor public="1" get="inline" set="null" line="10" static="1"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<x path="Int"/>
</f></getIndexFor>
		<getTypeFor public="1" get="inline" set="null" line="12" static="1"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="com.artemisx.ComponentType"/>
</f></getTypeFor>
		<getTypeFromIndex public="1" get="inline" set="null" line="24" static="1"><f a="index">
	<x path="Int"/>
	<x path="Class"><c path="com.artemisx.Component"/></x>
</f></getTypeFromIndex>
		<listAllComponentTypes public="1" set="method" line="28" static="1"><f a=""><x path="Void"/></f></listAllComponentTypes>
		<componentTypes line="44" static="1"><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.ComponentType"/></c></componentTypes>
		<componentIndicies line="45" static="1"><c path="Array"><c path="com.artemisx.ComponentType"/></c></componentIndicies>
		<INDEX line="46" static="1"><x path="Int"/></INDEX>
		<typeIndexComparator get="inline" set="null" line="50" static="1"><f a="a:b">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.ComponentType"/>
	<x path="Int"/>
</f></typeIndexComparator>
		<className set="method" line="70" static="1"><f a="clazz">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="String"/>
</f></className>
		<toString public="1" set="method" line="68"><f a=""><c path="String"/></f></toString>
		<get_index public="1" get="inline" set="null" line="66"><f a=""><x path="Int"/></f></get_index>
		<type><x path="Class"><c path="com.artemisx.Component"/></x></type>
		<index public="1" get="accessor" set="null"><x path="Int"/></index>
		<new set="method" line="60"><f a="type">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Entity" params="" file="../../artemis-haxelib/src/com/artemisx/Entity.hx">
		<get_systemBits get="inline" set="null" line="110"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_systemBits>
		<get_componentBits get="inline" set="null" line="109"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_componentBits>
		<get_id get="inline" set="null" line="107"><f a=""><x path="Int"/></f></get_id>
		<get_uuid get="inline" set="null" line="106"><f a=""><c path="String"/></f></get_uuid>
		<disable public="1" get="inline" set="null" line="104"><f a=""><x path="Void"/></f></disable>
		<enable public="1" get="inline" set="null" line="103"><f a=""><x path="Void"/></f></enable>
		<deleteFromWorld public="1" get="inline" set="null" line="101"><f a=""><x path="Void"/></f></deleteFromWorld>
		<changedInWorld public="1" get="inline" set="null" line="100"><f a=""><x path="Void"/></f></changedInWorld>
		<addToWorld public="1" get="inline" set="null" line="99"><f a=""><x path="Void"/></f></addToWorld>
		<isEnabled public="1" get="inline" set="null" line="97"><f a=""><x path="Bool"/></f></isEnabled>
		<isActive public="1" get="inline" set="null" line="96"><f a=""><x path="Bool"/></f></isActive>
		<getComponents public="1" get="inline" set="null" line="94"><f a="fillBag">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
</f></getComponents>
		<getComponent public="1" params="T" get="inline" set="null" line="93"><f a="clazz">
	<x path="Class"><c path="getComponent.T"/></x>
	<c path="getComponent.T"/>
</f></getComponent>
		<getComponentOfType public="1" get="inline" set="null" line="91"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
</f></getComponentOfType>
		<getWorld public="1" set="method" line="89"><f a=""><c path="com.artemisx.World"/></f></getWorld>
		<listComponents public="1" set="method" line="77"><f a=""><c path="String"/></f></listComponents>
		<removeComponentOfType public="1" get="inline" set="null" line="69"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Entity"/>
</f></removeComponentOfType>
		<removeComponentInstance public="1" get="inline" set="null" line="63"><f a="component">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.Entity"/>
</f></removeComponentInstance>
		<removeComponent public="1" get="inline" set="null" line="57"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="com.artemisx.Entity"/>
</f></removeComponent>
		<addComponentOfType public="1" get="inline" set="null" line="51"><f a="component:type">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Entity"/>
</f></addComponentOfType>
		<addComponent public="1" get="inline" set="null" line="45"><f a="component">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.Entity"/>
</f></addComponent>
		<reset set="method" line="39"><f a=""><x path="Void"/></f></reset>
		<componentManager><c path="com.artemisx.ComponentManager"/></componentManager>
		<entityManager><c path="com.artemisx.EntityManager"/></entityManager>
		<world><c path="com.artemisx.World"/></world>
		<systemBits public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</systemBits>
		<componentBits public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</componentBits>
		<id public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</id>
		<uuid public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</uuid>
		<new set="method" line="27"><f a="world:id">
	<c path="com.artemisx.World"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>*
 *  The entity class.
 *  originally written by Arni Arent
 *  ported to HaXe by Lewen Yu (AND HARRY)
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.EntityManager" params="" file="../../artemis-haxelib/src/com/artemisx/EntityManager.hx">
		<extends path="com.artemisx.Manager"/>
		<getEntity get="inline" set="null" line="90"><f a="entityId">
	<x path="Int"/>
	<c path="com.artemisx.Entity"/>
</f></getEntity>
		<get_totalDeleted public="1" set="method" line="88"><f a=""><c path="haxe.Int64"/></f></get_totalDeleted>
		<get_totalAdded public="1" set="method" line="85"><f a=""><c path="haxe.Int64"/></f></get_totalAdded>
		<get_totalCreated public="1" set="method" line="82"><f a=""><c path="haxe.Int64"/></f></get_totalCreated>
		<get_activeEntityCount public="1" set="method" line="78"><f a=""><x path="Int"/></f></get_activeEntityCount>
		<isEnabled public="1" get="inline" set="null" line="75"><f a="entityId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isActive public="1" get="inline" set="null" line="71"><f a="entityId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isActive>
		<onDeleted public="1" get="inline" set="null" line="58" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onAdded public="1" get="inline" set="null" line="51" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<onDisabled public="1" get="inline" set="null" line="50" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onEnabled public="1" get="inline" set="null" line="49" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<createEntityInstance public="1" get="inline" set="null" line="42"><f a=""><c path="com.artemisx.Entity"/></f></createEntityInstance>
		<initialize public="1" set="method" line="40" override="1"><f a=""><x path="Void"/></f></initialize>
		<identifierPool><c path="com.artemisx._EntityManager.IdentifierPool"/></identifierPool>
		<totalDeleted public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalDeleted>
		<totalCreated public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalCreated>
		<totalAdded public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalAdded>
		<activeEntityCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</activeEntityCount>
		<disabled><c path="com.artemisx.utils.Bitset"/></disabled>
		<entities><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></entities>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>*
 * The entityManager class.
 *  originally written by Arni Arent
 *  ported to HaXe by Lewen Yu and HARRY
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx._EntityManager.IdentifierPool" params="" file="../../artemis-haxelib/src/com/artemisx/EntityManager.hx" private="1" module="com.artemisx.EntityManager">
		<checkin public="1" get="inline" set="null" line="124"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></checkin>
		<checkout public="1" get="inline" set="null" line="113"><f a=""><x path="Int"/></f></checkout>
		<nextAvailableId><x path="Int"/></nextAvailableId>
		<ids><c path="com.artemisx.utils.Bag"><x path="Int"/></c></ids>
		<new public="1" set="method" line="107"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.EntitySystem" params="" file="../../artemis-haxelib/src/com/artemisx/EntitySystem.hx">
		<implements path="com.artemisx.EntityObserver"/>
		<set_world public="1" get="inline" set="null" line="118"><f a="v">
	<c path="com.artemisx.World"/>
	<c path="com.artemisx.World"/>
</f></set_world>
		<get_actives public="1" get="inline" set="null" line="117"><f a=""><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></f></get_actives>
		<set_passive public="1" get="inline" set="null" line="116"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_passive>
		<get_passive public="1" get="inline" set="null" line="115"><f a=""><x path="Bool"/></f></get_passive>
		<isPassive public="1" get="inline" set="null" line="114"><f a=""><x path="Bool"/></f></isPassive>
		<onDisabled public="1" set="method" line="112"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onEnabled public="1" set="method" line="111"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDeleted public="1" set="method" line="104"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onChanged public="1" set="method" line="103"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onAdded public="1" set="method" line="102"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<removeFromSystem set="method" line="95"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></removeFromSystem>
		<insertToSystem set="method" line="88"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></insertToSystem>
		<check set="method" line="55"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></check>
		<onRemoved set="method" line="53"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onRemoved>
		<onInserted set="method" line="52"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onInserted>
		<checkProcessing set="method" line="50"><f a=""><x path="Bool"/></f></checkProcessing>
		<processEntities set="method" line="49"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<initialize set="method" line="47"><f a=""><x path="Void"/></f></initialize>
		<end set="method" line="46"><f a=""><x path="Void"/></f></end>
		<begin set="method" line="45"><f a=""><x path="Void"/></f></begin>
		<process public="1" set="method" line="36"><f a=""><x path="Void"/></f></process>
		<oneSet><c path="com.artemisx.utils.Bitset"/></oneSet>
		<exclusionSet><c path="com.artemisx.utils.Bitset"/></exclusionSet>
		<allSet><c path="com.artemisx.utils.Bitset"/></allSet>
		<systemIndex><x path="Int"/></systemIndex>
		<dummy><x path="Bool"/></dummy>
		<aspect><c path="com.artemisx.Aspect"/></aspect>
		<passive public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</passive>
		<world public="1" get="null" set="accessor">
			<c path="com.artemisx.World"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<actives public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
			<meta><m n=":isVar"/></meta>
		</actives>
		<new public="1" set="method" line="24"><f a="aspect">
	<c path="com.artemisx.Aspect"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx._EntitySystem.SystemIndexManager" params="" file="../../artemis-haxelib/src/com/artemisx/EntitySystem.hx" private="1" module="com.artemisx.EntitySystem">
		<INDEX line="125" static="1"><x path="Int"/></INDEX>
		<indicies line="126" static="1"><c path="com.artemisx.utils.ClassHash"><x path="Int"/></c></indicies>
		<getIndexFor public="1" params="T" set="method" line="128" static="1"><f a="es">
	<x path="Class"><c path="getIndexFor.T"/></x>
	<x path="Int"/>
</f></getIndexFor>
	</class>
	<class path="com.artemisx.World" params="" file="../../artemis-haxelib/src/com/artemisx/World.hx">
		<fAdded line="297" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fAdded>
		<fChanged line="300" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fChanged>
		<fDisabled line="303" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fDisabled>
		<fEnabled line="306" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fEnabled>
		<fDeleted line="309" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fDeleted>
		<check set="method" line="283"><f a="entities:method">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<f a=":">
		<c path="com.artemisx.EntityObserver"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></check>
		<notifyManagers get="inline" set="null" line="276"><f a="post:e">
	<f a=":">
		<c path="com.artemisx.Manager"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></notifyManagers>
		<notifySystems get="inline" set="null" line="269"><f a="post:e">
	<f a=":">
		<c path="com.artemisx.EntitySystem"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></notifySystems>
		<set_delta get="inline" set="null" line="261"><f a="delta">
	<x path="Float"/>
	<x path="Float"/>
</f></set_delta>
		<get_delta get="inline" set="null" line="256"><f a=""><x path="Float"/></f></get_delta>
		<systemsBag><c path="com.artemisx.utils.Bag"><c path="com.artemisx.EntitySystem"/></c></systemsBag>
		<systems><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.EntitySystem"/></c></systems>
		<managersBag><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Manager"/></c></managersBag>
		<managers><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.Manager"/></c></managers>
		<disable><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></disable>
		<enable><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></enable>
		<deleted><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></deleted>
		<changed><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></changed>
		<added><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></added>
		<process public="1" set="method" line="231"><f a=""><x path="Void"/></f></process>
		<processBatch public="1" get="inline" set="null" line="221"><f a=""><x path="Void"/></f></processBatch>
		<getSystemSafe public="1" params="T" get="inline" set="null" line="210"><f a="type">
	<x path="Class"><c path="getSystemSafe.T"/></x>
	<c path="getSystemSafe.T"/>
</f></getSystemSafe>
		<getSystems public="1" get="inline" set="null" line="205"><f a=""><c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.EntitySystem"/></c></f></getSystems>
		<getSystem public="1" params="T" get="inline" set="null" line="200"><f a="type">
	<x path="Class"><c path="getSystem.T"/></x>
	<c path="getSystem.T"/>
</f></getSystem>
		<getMapper public="1" params="T" get="inline" set="null" line="195"><f a="type">
	<x path="Class"><c path="getMapper.T"/></x>
	<c path="com.artemisx.ComponentMapper"><c path="getMapper.T"/></c>
</f></getMapper>
		<getEntity public="1" get="inline" set="null" line="190"><f a="entityId">
	<x path="Int"/>
	<c path="com.artemisx.Entity"/>
</f></getEntity>
		<enableSystemsOfTypes public="1" get="inline" set="null" line="180"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></enableSystemsOfTypes>
		<disableSystemsOfTypes public="1" get="inline" set="null" line="170"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></disableSystemsOfTypes>
		<deleteSystemsOfTypes public="1" get="inline" set="null" line="159"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></deleteSystemsOfTypes>
		<deleteSystem public="1" get="inline" set="null" line="153"><f a="system">
	<c path="com.artemisx.EntitySystem"/>
	<x path="Void"/>
</f></deleteSystem>
		<setSystem public="1" params="T" get="inline" set="null" line="144"><f a="system:?passive">
	<c path="setSystem.T"/>
	<x path="Bool"/>
	<c path="setSystem.T"/>
</f></setSystem>
		<createEntity public="1" get="inline" set="null" line="137"><f a=""><c path="com.artemisx.Entity"/></f></createEntity>
		<containsActiveEntity public="1" get="inline" set="null" line="132"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
</f></containsActiveEntity>
		<disableEntity public="1" set="method" line="127"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></disableEntity>
		<changedEntity public="1" get="inline" set="null" line="118"><f a="e:?flush">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></changedEntity>
		<enableEntity public="1" get="inline" set="null" line="113"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></enableEntity>
		<deleteEntities public="1" set="method" line="101"><f a=""><x path="Void"/></f></deleteEntities>
		<deleteEntity public="1" get="inline" set="null" line="92"><f a="e:?flush">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></deleteEntity>
		<addEntity public="1" get="inline" set="null" line="87"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></addEntity>
		<deleteManager public="1" get="inline" set="null" line="81"><f a="manager">
	<c path="com.artemisx.Manager"/>
	<x path="Void"/>
</f></deleteManager>
		<setManager public="1" params="M" get="inline" set="null" line="73"><f a="manager">
	<c path="setManager.M"/>
	<c path="setManager.M"/>
</f></setManager>
		<getManagerSafe public="1" params="M" set="method" line="62"><f a="managerType">
	<x path="Class"><c path="getManagerSafe.M"/></x>
	<c path="getManagerSafe.M"/>
</f></getManagerSafe>
		<getManager public="1" params="M" get="inline" set="null" line="57"><f a="managerType">
	<x path="Class"><c path="getManager.M"/></x>
	<c path="getManager.M"/>
</f></getManager>
		<getComponentManager public="1" get="inline" set="null" line="52"><f a=""><c path="com.artemisx.ComponentManager"/></f></getComponentManager>
		<getEntityManager public="1" get="inline" set="null" line="47"><f a=""><c path="com.artemisx.EntityManager"/></f></getEntityManager>
		<initialize public="1" set="method" line="35"><f a=""><x path="Void"/></f></initialize>
		<delta public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</delta>
		<componentManager public="1" set="null">
			<c path="com.artemisx.ComponentManager"/>
			<meta><m n=":isVar"/></meta>
		</componentManager>
		<entityManager public="1" set="null">
			<c path="com.artemisx.EntityManager"/>
			<meta><m n=":isVar"/></meta>
		</entityManager>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx._World.ComponentMapperInitHelper" params="" file="../../artemis-haxelib/src/com/artemisx/World.hx" private="1" module="com.artemisx.World"><config public="1" set="method" line="320" static="1"><f a="target:world">
	<d/>
	<c path="com.artemisx.World"/>
	<x path="Void"/>
</f></config></class>
	<class path="com.artemisx._World.Performer" params="" file="../../artemis-haxelib/src/com/artemisx/World.hx" private="1" module="com.artemisx.World">
		<perform public="1" set="method" line="341"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></perform>
		<new public="1" set="method" line="340"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.managers.TagManager" params="" file="../../artemis-haxelib/src/com/artemisx/managers/TagManager.hx">
		<extends path="com.artemisx.Manager"/>
		<onDeleted public="1" get="inline" set="null" line="47" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<initialize set="method" line="45" override="1"><f a=""><x path="Void"/></f></initialize>
		<getRegisteredTags public="1" get="inline" set="null" line="43"><f a=""><t path="Iterator"><c path="String"/></t></f></getRegisteredTags>
		<getEntity public="1" set="method" line="41"><f a="tag">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
</f></getEntity>
		<isRegistered public="1" set="method" line="39"><f a="tag">
	<c path="String"/>
	<x path="Bool"/>
</f></isRegistered>
		<unregister public="1" set="method" line="30"><f a="tag">
	<c path="String"/>
	<x path="Void"/>
</f></unregister>
		<unregisterEntity public="1" set="method" line="23"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></unregisterEntity>
		<register public="1" set="method" line="17"><f a="tag:e">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></register>
		<tagsByEntity><c path="haxe.ds.IntMap"><c path="String"/></c></tagsByEntity>
		<entitiesByTag><c path="haxe.ds.StringMap"><c path="com.artemisx.Entity"/></c></entitiesByTag>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.utils.ImmutableBag" params="E" file="../../artemis-haxelib/src/com/artemisx/utils/ImmutableBag.hx" interface="1">
		<contains public="1" set="method"><f a="e">
	<c path="com.artemisx.utils.ImmutableBag.E"/>
	<x path="Bool"/>
</f></contains>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.ImmutableBag.E"/>
</f></get>
		<size public="1" set="null"><x path="Int"/></size>
	</class>
	<class path="com.artemisx.utils.Bag" params="E" file="../../artemis-haxelib/src/com/artemisx/utils/Bag.hx">
		<implements path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></implements>
		<toString public="1" set="method" line="150"><f a=""><x path="Void"/></f></toString>
		<addAllin public="1" get="inline" set="null" line="143"><f a="items">
	<c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></c>
	<x path="Void"/>
</f></addAllin>
		<clear public="1" get="inline" set="null" line="135"><f a=""><x path="Void"/></f></clear>
		<ensureCapacity public="1" get="inline" set="null" line="128"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<grow get="inline" set="null" line="120"><f a="newCapactiy">
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<set public="1" get="inline" set="null" line="111"><f a="index:e">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method" line="103"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Void"/>
</f></add>
		<isEmpty public="1" get="inline" set="null" line="100"><f a=""><x path="Bool"/></f></isEmpty>
		<isIndexWithinBounds public="1" get="inline" set="null" line="98"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></isIndexWithinBounds>
		<getCapacity public="1" get="inline" set="null" line="96"><f a=""><x path="Int"/></f></getCapacity>
		<get public="1" get="inline" set="null" line="94"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></get>
		<removeAllIn public="1" get="inline" set="null" line="73"><f a="bag">
	<c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></c>
	<x path="Bool"/>
</f></removeAllIn>
		<contains public="1" get="inline" set="null" line="61"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Bool"/>
</f></contains>
		<removeLast public="1" set="method" line="51"><f a=""><c path="com.artemisx.utils.Bag.E"/></f></removeLast>
		<remove public="1" get="inline" set="null" line="34"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></remove>
		<removeAt public="1" get="inline" set="null" line="24"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></removeAt>
		<size public="1" set="null"><x path="Int"/></size>
		<data><t path="com.artemisx.utils.TArray"><c path="com.artemisx.utils.Bag.E"/></t></data>
		<new public="1" set="method" line="13"><f a="?capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Maybe one day there will be something faster and this class would allow us to
 * switch to a faster data struct without modifying any other code</haxe_doc>
	</class>
	<typedef path="com.artemisx.utils.INT_TYPE" params="" file="../../artemis-haxelib/src/com/artemisx/utils/Bitset.hx" module="com.artemisx.utils.Bitset"><x path="UInt"/></typedef>
	<class path="com.artemisx.utils.Bitset" params="" file="../../artemis-haxelib/src/com/artemisx/utils/Bitset.hx">
		<ADDRESS_BITS_PER_WORD get="inline" set="null" line="15" static="1"><x path="Int"/></ADDRESS_BITS_PER_WORD>
		<BITS_PER_WORD get="inline" set="null" line="16" static="1"><x path="Int"/></BITS_PER_WORD>
		<BIT_INDEX_MASK get="inline" set="null" line="17" static="1"><x path="Int"/></BIT_INDEX_MASK>
		<WORD_MASK get="inline" set="null" line="19" static="1"><x path="Int"/></WORD_MASK>
		<numberOfTrailingZeros public="1" get="inline" set="null" line="174" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></numberOfTrailingZeros>
		<toString public="1" set="method" line="170"><f a=""><c path="String"/></f></toString>
		<equals public="1" set="method" line="154"><f a="v">
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></equals>
		<recalulateWordsInUse set="method" line="141"><f a=""><x path="Void"/></f></recalulateWordsInUse>
		<get_length public="1" set="method" line="137"><f a=""><x path="Int"/></f></get_length>
		<isEmpty public="1" set="method" line="127"><f a=""><x path="Bool"/></f></isEmpty>
		<clear public="1" set="method" line="118"><f a=""><x path="Void"/></f></clear>
		<unset public="1" get="inline" set="null" line="111"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></unset>
		<set public="1" get="inline" set="null" line="105"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="95"><f a="bitIndex">
	<x path="Int"/>
	<x path="Bool"/>
</f></get>
		<nextSetBit public="1" set="method" line="78"><f a="fromIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></nextSetBit>
		<nextClearBit public="1" get="inline" set="null" line="61"><f a="fromIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></nextClearBit>
		<intersects public="1" get="inline" set="null" line="50"><f a="set">
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></intersects>
		<ensureCapacity public="1" get="inline" set="null" line="37"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<copy public="1" set="method" line="30"><f a=""><c path="com.artemisx.utils.Bitset"/></f></copy>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<wordsInUse public="1" set="null"><x path="Int"/></wordsInUse>
		<bits><t path="com.artemisx.utils.TArray"><x path="Int"/></t></bits>
		<new public="1" set="method" line="25"><f a="?numBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="com.artemisx.utils.TArray" params="T" file="../../artemis-haxelib/src/com/artemisx/utils/TArray.hx"><c path="Array"><c path="com.artemisx.utils.TArray.T"/></c></typedef>
	<class path="com.artemisx.utils.UUID" params="" file="../../artemis-haxelib/src/com/artemisx/utils/UUID.hx">
		<M31 get="inline" set="null" line="40" static="1"><x path="Float"/></M31>
		<MINSTD get="inline" set="null" line="41" static="1"><x path="Float"/></MINSTD>
		<next get="inline" set="null" line="44" static="1"><f a="seed">
	<x path="Int"/>
	<x path="Int"/>
</f></next>
		<getUuid public="1" set="method" line="48" static="1"><f a="?seed">
	<x path="Int"/>
	<c path="String"/>
</f></getUuid>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\code\haxe/std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\code\haxe/std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\code\haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="C:\code\haxe/std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTestPoint>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<visible public="1"><x path="Bool"/></visible>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotation public="1"><x path="Float"/></rotation>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<name public="1"><c path="String"/></name>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<height public="1"><x path="Float"/></height>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<alpha public="1"><x path="Float"/></alpha>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\code\haxe/std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<focusRect public="1"><d/></focusRect>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\code\haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</removeChildren>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\code\haxe/std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</startTouchDrag>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></startDrag>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\code\haxe/std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<isPlaying public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<enabled public="1"><x path="Bool"/></enabled>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\code\haxe/std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="51" static="1"><x path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="83" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="92" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="102" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="110" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="116" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="144" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="163" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="208" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<start set="method" line="53"><f a=""><x path="Void"/></f></start>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\code\haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\code\haxe/std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.Vector" params="T" file="C:\code\haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1"><x path="Int"/></length>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\code\haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<stub public="1"><x path="Bool"/></stub>
		<errno public="1"><x path="UInt"/></errno>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\code\haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<silent public="1"><x path="Bool"/></silent>
		<shortcut public="1"><c path="String"/></shortcut>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<name public="1"><c path="String"/></name>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<description public="1"><c path="String"/></description>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\code\haxe/std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT3/>
		<ACTIONSCRIPT2/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="C:\code\haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="UInt"/>
</f></threshold>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></pixelDissolve>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<x path="Void"/>
</f></perlinNoise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<x path="Int"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<t path="flash.utils.Object"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="Bool"/>
</f></hitTest>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<encode public="1" set="method">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<drawWithQuality public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</drawWithQuality>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<copyPixelsToByteArray public="1" set="method">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<width public="1" set="null"><x path="Int"/></width>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<height public="1" set="null"><x path="Int"/></height>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\code\haxe/std/flash/display/BlendMode.hx">
		<SUBTRACT/>
		<SHADER/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\code\haxe/std/flash/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\code\haxe/std/flash/display/ColorCorrection.hx">
		<ON/>
		<OFF/>
		<DEFAULT/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\code\haxe/std/flash/display/ColorCorrectionSupport.hx">
		<UNSUPPORTED/>
		<DEFAULT_ON/>
		<DEFAULT_OFF/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\code\haxe/std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<name public="1" set="null"><c path="String"/></name>
		<frame public="1" set="null"><x path="Int"/></frame>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\code\haxe/std/flash/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\code\haxe/std/flash/display/Graphics.hx" extern="1">
		<readGraphicsData public="1" set="method">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</readGraphicsData>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineBitmapStyle>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\code\haxe/std/flash/display/GraphicsPathWinding.hx">
		<NON_ZERO/>
		<EVEN_ODD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="C:\code\haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\code\haxe/std/flash/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\code\haxe/std/flash/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\code\haxe/std/flash/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\code\haxe/std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<unloadAndStop public="1" set="method">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unloadAndStop>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\code\haxe/std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<width public="1" set="null"><x path="Int"/></width>
		<url public="1" set="null"><c path="String"/></url>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<height public="1" set="null"><x path="Int"/></height>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
	</class>
	<class path="flash.display.NativeMenu" params="" file="C:\code\haxe/std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="C:\code\haxe/std/flash/display/Scene.hx" extern="1">
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<name public="1" set="null"><c path="String"/></name>
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\code\haxe/std/flash/display/Shader.hx" extern="1">
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\code\haxe/std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\code\haxe/std/flash/display/ShaderPrecision.hx">
		<FULL/>
		<FAST/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="C:\code\haxe/std/flash/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\code\haxe/std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<wmodeGPU public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<stageVideos public="1" set="null">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stage3Ds public="1" set="null">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<softKeyboardRect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<frameRate public="1"><x path="Float"/></frameRate>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<displayContextInfo public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<contentsScaleFactor public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<allowsFullScreenInteractive public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<allowsFullScreen public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</allowsFullScreen>
		<align public="1"><e path="flash.display.StageAlign"/></align>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\code\haxe/std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<visible public="1"><x path="Bool"/></visible>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\code\haxe/std/flash/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\code\haxe/std/flash/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\code\haxe/std/flash/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH_8X8_LINEAR/>
		<HIGH_8X8/>
		<HIGH_16X16_LINEAR/>
		<HIGH_16X16/>
		<HIGH/>
		<BEST/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\code\haxe/std/flash/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\code\haxe/std/flash/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="C:\code\haxe/std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<x path="Void"/>
</f></setVertexBufferAt>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setStencilReferenceValue>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setSamplerStateAt public="1" set="method">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderToTexture>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setProgramConstantsFromVector>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTriangles>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<dispose public="1" set="method"><f a="?recreate">
	<x path="Bool"/>
	<x path="Void"/>
</f></dispose>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<x path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></configureBackBuffer>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></clear>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\code\haxe/std/flash/display3D/Context3DBlendFactor.hx">
		<ZERO/>
		<SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE/>
		<DESTINATION_COLOR/>
		<DESTINATION_ALPHA/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\code\haxe/std/flash/display3D/Context3DCompareMode.hx">
		<NOT_EQUAL/>
		<NEVER/>
		<LESS_EQUAL/>
		<LESS/>
		<GREATER_EQUAL/>
		<GREATER/>
		<EQUAL/>
		<ALWAYS/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="C:\code\haxe/std/flash/display3D/Context3DMipFilter.hx">
		<MIPNONE/>
		<MIPNEAREST/>
		<MIPLINEAR/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="C:\code\haxe/std/flash/display3D/Context3DProfile.hx">
		<BASELINE_CONSTRAINED/>
		<BASELINE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\code\haxe/std/flash/display3D/Context3DProgramType.hx">
		<VERTEX/>
		<FRAGMENT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\code\haxe/std/flash/display3D/Context3DStencilAction.hx">
		<ZERO/>
		<SET/>
		<KEEP/>
		<INVERT/>
		<INCREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<DECREMENT_SATURATE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="C:\code\haxe/std/flash/display3D/Context3DTextureFilter.hx">
		<NEAREST/>
		<LINEAR/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\code\haxe/std/flash/display3D/Context3DTextureFormat.hx">
		<COMPRESSED_ALPHA/>
		<COMPRESSED/>
		<BGR_PACKED/>
		<BGRA_PACKED/>
		<BGRA/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\code\haxe/std/flash/display3D/Context3DTriangleFace.hx">
		<NONE/>
		<FRONT_AND_BACK/>
		<FRONT/>
		<BACK/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\code\haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
		<FLOAT_4/>
		<FLOAT_3/>
		<FLOAT_2/>
		<FLOAT_1/>
		<BYTES_4/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="C:\code\haxe/std/flash/display3D/Context3DWrapMode.hx">
		<REPEAT/>
		<CLAMP/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\code\haxe/std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\code\haxe/std/flash/display3D/Program3D.hx" extern="1">
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\code\haxe/std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\code\haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\code\haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\code\haxe/std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\code\haxe/std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<name public="1"><d/></name>
		<message public="1"><d/></message>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.errors.TypeError" params="" file="C:\code\haxe/std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="C:\code\haxe/std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<type public="1" set="null"><c path="String"/></type>
		<target public="1" set="null"><d/></target>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\code\haxe/std/flash/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<BUBBLING_PHASE/>
		<AT_TARGET/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.events.KeyboardEvent" params="" file="C:\code\haxe/std/flash/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN public="1" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" static="1"><c path="String"/></KEY_UP>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<keyLocation public="1"><e path="flash.ui.KeyLocation"/></keyLocation>
		<keyCode public="1"><x path="UInt"/></keyCode>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<charCode public="1"><x path="UInt"/></charCode>
		<altKey public="1"><x path="Bool"/></altKey>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<e path="flash.ui.KeyLocation"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\code\haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="C:\code\haxe/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\code\haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="C:\code\haxe/std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<strength public="1"><x path="Float"/></strength>
		<quality public="1"><x path="Int"/></quality>
		<knockout public="1"><x path="Bool"/></knockout>
		<inner public="1"><x path="Bool"/></inner>
		<color public="1"><x path="UInt"/></color>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<alpha public="1"><x path="Float"/></alpha>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\code\haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<redOffset public="1"><x path="Float"/></redOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<color public="1"><x path="UInt"/></color>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\code\haxe/std/flash/geom/Matrix.hx" extern="1">
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<ty public="1"><x path="Float"/></ty>
		<tx public="1"><x path="Float"/></tx>
		<d public="1"><x path="Float"/></d>
		<c public="1"><x path="Float"/></c>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\code\haxe/std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\code\haxe/std/flash/geom/Orientation3D.hx">
		<QUATERNION/>
		<EULER_ANGLES/>
		<AXIS_ANGLE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\code\haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<focalLength public="1"><x path="Float"/></focalLength>
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\code\haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<length public="1" set="null"><x path="Float"/></length>
		<new public="1" set="method"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\code\haxe/std/flash/geom/Rectangle.hx" extern="1">
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<top public="1"><x path="Float"/></top>
		<size public="1"><c path="flash.geom.Point"/></size>
		<right public="1"><x path="Float"/></right>
		<left public="1"><x path="Float"/></left>
		<height public="1"><x path="Float"/></height>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<bottom public="1"><x path="Float"/></bottom>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\code\haxe/std/flash/geom/Transform.hx" extern="1">
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\code\haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<z public="1"><x path="Float"/></z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<w public="1"><x path="Float"/></w>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<length public="1" set="null"><x path="Float"/></length>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="C:\code\haxe/std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" static="1"><c path="String"/></BLACK>
		<BLUE public="1" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" static="1"><c path="String"/></GRAY>
		<GREEN public="1" static="1"><c path="String"/></GREEN>
		<LARGE public="1" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" static="1"><c path="String"/></RAISED>
		<RED public="1" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" static="1"><c path="String"/></YELLOW>
		<size public="1"><c path="String"/></size>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontColor public="1"><c path="String"/></fontColor>
		<font public="1"><c path="String"/></font>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<fillColor public="1"><c path="String"/></fillColor>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="C:\code\haxe/std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" static="1"><x path="Int"/></PLAYING>
		<READY public="1" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" static="1"><x path="Int"/></SUSPENDED>
		<UNINITIALIZED public="1" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="C:\code\haxe/std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<BAD_MANIFEST_SIGNATURE public="1" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIA_INTERLEAVING public="1" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_FAIL_OVER public="1" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_LOAD_PLAY_LIST public="1" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CODEC_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CURRENT_PERIOD_EXPIRED public="1" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DRM_INIT_ERROR public="1" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_STRUCTURE_INVALID public="1" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FRAGMENT_READ_ERROR public="1" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<INVALID_OPERATION public="1" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<LIVE_HOLD public="1" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<NETWORK_DOWN public="1" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_FIXED_SIZE public="1" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_USEABLE_BITRATE_PROFILE public="1" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" static="1"><x path="Int"/></PARSE_ERROR>
		<PERIOD_HOLD public="1" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<RANGE_ERROR public="1" static="1"><x path="Int"/></RANGE_ERROR>
		<REPLACEMENT_FAILED public="1" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SEEK_FAILED public="1" static="1"><x path="Int"/></SEEK_FAILED>
		<SIZE_UNKNOWN public="1" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SUCCESS public="1" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<UNDERFLOW public="1" static="1"><x path="Int"/></UNDERFLOW>
		<UNSUPPORTED_CONFIGURATION public="1" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="C:\code\haxe/std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="C:\code\haxe/std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" static="1"><c path="String"/></UNDEFINED>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seek public="1" set="method"><f a="offset:?inBufferSeek">
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></seek>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<volume public="1"><x path="Float"/></volume>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<time public="1" set="null"><x path="Float"/></time>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="C:\code\haxe/std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setMotionLevel>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMode>
		<setLoopback public="1" set="method"><f a="?compress">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopback>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<drawToBitmapData public="1" set="method">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<copyToVector public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<copyToByteArray public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<width public="1" set="null"><x path="Int"/></width>
		<quality public="1" set="null"><x path="Int"/></quality>
		<position public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<index public="1" set="null"><x path="Int"/></index>
		<height public="1" set="null"><x path="Int"/></height>
		<fps public="1" set="null"><x path="Float"/></fps>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\code\haxe/std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSilenceLevel>
		<setLoopBack public="1" set="method"><f a="?state">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopBack>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<rate public="1"><x path="Int"/></rate>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<index public="1" set="null"><x path="Int"/></index>
		<gain public="1"><x path="Float"/></gain>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\code\haxe/std/flash/media/MicrophoneEnhancedMode.hx">
		<SPEAKER_MUTE/>
		<OFF/>
		<HEADSET/>
		<HALF_DUPLEX/>
		<FULL_DUPLEX/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\code\haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<echoPath public="1"><x path="Int"/></echoPath>
		<autoGain public="1"><x path="Bool"/></autoGain>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\code\haxe/std/flash/media/SoundCodec.hx">
		<SPEEX/>
		<PCMU/>
		<PCMA/>
		<NELLYMOSER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="C:\code\haxe/std/flash/media/SoundTransform.hx" extern="1">
		<volume public="1"><x path="Float"/></volume>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<pan public="1"><x path="Float"/></pan>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<new public="1" set="method"><f a="?vol:?panning">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\code\haxe/std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<attachCamera public="1" set="method">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachAVStream public="1" set="method">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<depth public="1"><x path="Int"/></depth>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\code\haxe/std/flash/media/VideoStreamSettings.hx" extern="1">
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<width public="1" set="null"><x path="Int"/></width>
		<quality public="1" set="null"><x path="Int"/></quality>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<height public="1" set="null"><x path="Int"/></height>
		<fps public="1" set="null"><x path="Float"/></fps>
		<codec public="1" set="null"><c path="String"/></codec>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\code\haxe/std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<x path="Bool"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></addHeader>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<uri public="1" set="null"><c path="String"/></uri>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<proxyType public="1"><c path="String"/></proxyType>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<client public="1"><d/></client>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\code\haxe/std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<x path="Int"/>
	<x path="Void"/>
</f></attachCamera>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<time public="1" set="null"><x path="Float"/></time>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastInfo public="1" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<client public="1"><d/></client>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<backBufferLength public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\code\haxe/std/flash/net/NetStreamInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<xmpData public="1" set="null"><d/></xmpData>
		<videoLossRate public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<uri public="1" set="null"><c path="String"/></uri>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\code\haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\code\haxe/std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transition public="1"><c path="String"/></transition>
		<streamName public="1"><c path="String"/></streamName>
		<start public="1"><x path="Float"/></start>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<len public="1"><x path="Float"/></len>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="C:\code\haxe/std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLLoader" params="" file="C:\code\haxe/std/flash/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<data public="1"><d/></data>
		<bytesTotal public="1"><x path="UInt"/></bytesTotal>
		<bytesLoaded public="1"><x path="UInt"/></bytesLoaded>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="C:\code\haxe/std/flash/net/URLLoaderDataFormat.hx">
		<VARIABLES/>
		<TEXT/>
		<BINARY/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.net.URLRequest" params="" file="C:\code\haxe/std/flash/net/URLRequest.hx" extern="1">
		<url public="1"><c path="String"/></url>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<method public="1"><c path="String"/></method>
		<digest public="1"><c path="String"/></digest>
		<data public="1"><d/></data>
		<contentType public="1"><c path="String"/></contentType>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\code\haxe/std/flash/net/URLRequestHeader.hx" extern="1">
		<value public="1"><c path="String"/></value>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\code\haxe/std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<getQualifiedDefinitionNames public="1" set="method">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\code\haxe/std/flash/system/ImageDecodingPolicy.hx">
		<ON_LOAD/>
		<ON_DEMAND/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\code\haxe/std/flash/system/LoaderContext.hx" extern="1">
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\code\haxe/std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="C:\code\haxe/std/flash/text/AntiAliasType.hx">
		<NORMAL/>
		<ADVANCED/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\code\haxe/std/flash/text/GridFitType.hx">
		<SUBPIXEL/>
		<PIXEL/>
		<NONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="C:\code\haxe/std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="C:\code\haxe/std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setTextFormat>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertXMLText>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<thickness public="1"><x path="Float"/></thickness>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<textInteractionMode public="1" set="null">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textColor public="1"><x path="UInt"/></textColor>
		<text public="1"><c path="String"/></text>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<sharpness public="1"><x path="Float"/></sharpness>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectable public="1"><x path="Bool"/></selectable>
		<scrollV public="1"><x path="Int"/></scrollV>
		<scrollH public="1"><x path="Int"/></scrollH>
		<restrict public="1"><c path="String"/></restrict>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<multiline public="1"><x path="Bool"/></multiline>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxChars public="1"><x path="Int"/></maxChars>
		<length public="1" set="null"><x path="Int"/></length>
		<htmlText public="1"><c path="String"/></htmlText>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<border public="1"><x path="Bool"/></border>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<background public="1"><x path="Bool"/></background>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\code\haxe/std/flash/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\code\haxe/std/flash/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\code\haxe/std/flash/text/TextFormat.hx" extern="1">
		<url public="1"><c path="String"/></url>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<target public="1"><c path="String"/></target>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<font public="1"><c path="String"/></font>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\code\haxe/std/flash/text/TextFormatAlign.hx">
		<START/>
		<RIGHT/>
		<LEFT/>
		<JUSTIFY/>
		<END/>
		<CENTER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\code\haxe/std/flash/text/TextFormatDisplay.hx">
		<INLINE/>
		<BLOCK/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\code\haxe/std/flash/text/TextInteractionMode.hx">
		<SELECTION/>
		<NORMAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\code\haxe/std/flash/text/TextLineMetrics.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<leading public="1"><x path="Float"/></leading>
		<height public="1"><x path="Float"/></height>
		<descent public="1"><x path="Float"/></descent>
		<ascent public="1"><x path="Float"/></ascent>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\code\haxe/std/flash/text/TextSnapshot.hx" extern="1">
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<x path="UInt"/>
	<x path="Void"/>
</f></setSelectColor>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTestTextNearPos>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></getText>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<x path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\code\haxe/std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\code\haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<zoom public="1"><x path="Bool"/></zoom>
		<save public="1"><x path="Bool"/></save>
		<rewind public="1"><x path="Bool"/></rewind>
		<quality public="1"><x path="Bool"/></quality>
		<print public="1"><x path="Bool"/></print>
		<play public="1"><x path="Bool"/></play>
		<loop public="1"><x path="Bool"/></loop>
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\code\haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<paste public="1"><x path="Bool"/></paste>
		<cut public="1"><x path="Bool"/></cut>
		<copy public="1"><x path="Bool"/></copy>
		<clear public="1"><x path="Bool"/></clear>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.ui.KeyLocation" params="" file="C:\code\haxe/std/flash/ui/KeyLocation.hx">
		<STANDARD/>
		<RIGHT/>
		<NUM_PAD/>
		<LEFT/>
		<D_PAD/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.ui.Keyboard" params="" file="C:\code\haxe/std/flash/ui/Keyboard.hx" extern="1">
		<A public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</A>
		<ALTERNATE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</ALTERNATE>
		<AUDIO public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</AUDIO>
		<B public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</B>
		<BACK public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BACK>
		<BACKQUOTE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKQUOTE>
		<BACKSLASH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKSLASH>
		<BACKSPACE public="1" static="1"><x path="UInt"/></BACKSPACE>
		<BLUE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BLUE>
		<C public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</C>
		<CAPS_LOCK public="1" static="1"><x path="UInt"/></CAPS_LOCK>
		<CHANNEL_DOWN public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_DOWN>
		<CHANNEL_UP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_UP>
		<COMMA public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMA>
		<COMMAND public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMAND>
		<CONTROL public="1" static="1"><x path="UInt"/></CONTROL>
		<CharCodeStrings public="1" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</CharCodeStrings>
		<D public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</D>
		<DELETE public="1" static="1"><x path="UInt"/></DELETE>
		<DOWN public="1" static="1"><x path="UInt"/></DOWN>
		<DVR public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</DVR>
		<E public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</E>
		<END public="1" static="1"><x path="UInt"/></END>
		<ENTER public="1" static="1"><x path="UInt"/></ENTER>
		<EQUAL public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</EQUAL>
		<ESCAPE public="1" static="1"><x path="UInt"/></ESCAPE>
		<EXIT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</EXIT>
		<F public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</F>
		<F1 public="1" static="1"><x path="UInt"/></F1>
		<F10 public="1" static="1"><x path="UInt"/></F10>
		<F11 public="1" static="1"><x path="UInt"/></F11>
		<F12 public="1" static="1"><x path="UInt"/></F12>
		<F13 public="1" static="1"><x path="UInt"/></F13>
		<F14 public="1" static="1"><x path="UInt"/></F14>
		<F15 public="1" static="1"><x path="UInt"/></F15>
		<F2 public="1" static="1"><x path="UInt"/></F2>
		<F3 public="1" static="1"><x path="UInt"/></F3>
		<F4 public="1" static="1"><x path="UInt"/></F4>
		<F5 public="1" static="1"><x path="UInt"/></F5>
		<F6 public="1" static="1"><x path="UInt"/></F6>
		<F7 public="1" static="1"><x path="UInt"/></F7>
		<F8 public="1" static="1"><x path="UInt"/></F8>
		<F9 public="1" static="1"><x path="UInt"/></F9>
		<FAST_FORWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</FAST_FORWARD>
		<G public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</G>
		<GREEN public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GREEN>
		<GUIDE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GUIDE>
		<H public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</H>
		<HELP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</HELP>
		<HOME public="1" static="1"><x path="UInt"/></HOME>
		<I public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</I>
		<INFO public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INFO>
		<INPUT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INPUT>
		<INSERT public="1" static="1"><x path="UInt"/></INSERT>
		<J public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</J>
		<K public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</K>
		<KEYNAME_BEGIN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BEGIN>
		<KEYNAME_BREAK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BREAK>
		<KEYNAME_CLEARDISPLAY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARDISPLAY>
		<KEYNAME_CLEARLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARLINE>
		<KEYNAME_DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETE>
		<KEYNAME_DELETECHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETECHAR>
		<KEYNAME_DELETELINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETELINE>
		<KEYNAME_DOWNARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DOWNARROW>
		<KEYNAME_END public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_END>
		<KEYNAME_EXECUTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_EXECUTE>
		<KEYNAME_F1 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F1>
		<KEYNAME_F10 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F10>
		<KEYNAME_F11 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F11>
		<KEYNAME_F12 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F12>
		<KEYNAME_F13 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F13>
		<KEYNAME_F14 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F14>
		<KEYNAME_F15 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F15>
		<KEYNAME_F16 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F16>
		<KEYNAME_F17 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F17>
		<KEYNAME_F18 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F18>
		<KEYNAME_F19 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F19>
		<KEYNAME_F2 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F2>
		<KEYNAME_F20 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F20>
		<KEYNAME_F21 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F21>
		<KEYNAME_F22 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F22>
		<KEYNAME_F23 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F23>
		<KEYNAME_F24 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F24>
		<KEYNAME_F25 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F25>
		<KEYNAME_F26 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F26>
		<KEYNAME_F27 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F27>
		<KEYNAME_F28 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F28>
		<KEYNAME_F29 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F29>
		<KEYNAME_F3 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F3>
		<KEYNAME_F30 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F30>
		<KEYNAME_F31 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F31>
		<KEYNAME_F32 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F32>
		<KEYNAME_F33 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F33>
		<KEYNAME_F34 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F34>
		<KEYNAME_F35 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F35>
		<KEYNAME_F4 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F4>
		<KEYNAME_F5 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F5>
		<KEYNAME_F6 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F6>
		<KEYNAME_F7 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F7>
		<KEYNAME_F8 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F8>
		<KEYNAME_F9 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F9>
		<KEYNAME_FIND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_FIND>
		<KEYNAME_HELP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HELP>
		<KEYNAME_HOME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HOME>
		<KEYNAME_INSERT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERT>
		<KEYNAME_INSERTCHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTCHAR>
		<KEYNAME_INSERTLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTLINE>
		<KEYNAME_LEFTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_LEFTARROW>
		<KEYNAME_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MENU>
		<KEYNAME_MODESWITCH public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MODESWITCH>
		<KEYNAME_NEXT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_NEXT>
		<KEYNAME_PAGEDOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEDOWN>
		<KEYNAME_PAGEUP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEUP>
		<KEYNAME_PAUSE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAUSE>
		<KEYNAME_PREV public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PREV>
		<KEYNAME_PRINT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINT>
		<KEYNAME_PRINTSCREEN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINTSCREEN>
		<KEYNAME_REDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_REDO>
		<KEYNAME_RESET public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RESET>
		<KEYNAME_RIGHTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RIGHTARROW>
		<KEYNAME_SCROLLLOCK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SCROLLLOCK>
		<KEYNAME_SELECT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SELECT>
		<KEYNAME_STOP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_STOP>
		<KEYNAME_SYSREQ public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSREQ>
		<KEYNAME_SYSTEM public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSTEM>
		<KEYNAME_UNDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UNDO>
		<KEYNAME_UPARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UPARROW>
		<KEYNAME_USER public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_USER>
		<L public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</L>
		<LAST public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LAST>
		<LEFT public="1" static="1"><x path="UInt"/></LEFT>
		<LEFTBRACKET public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</LEFTBRACKET>
		<LIVE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LIVE>
		<M public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</M>
		<MASTER_SHELL public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MASTER_SHELL>
		<MENU public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MENU>
		<MINUS public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</MINUS>
		<N public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</N>
		<NEXT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</NEXT>
		<NUMBER_0 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_0>
		<NUMBER_1 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_1>
		<NUMBER_2 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_2>
		<NUMBER_3 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_3>
		<NUMBER_4 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_4>
		<NUMBER_5 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_5>
		<NUMBER_6 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_6>
		<NUMBER_7 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_7>
		<NUMBER_8 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_8>
		<NUMBER_9 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_9>
		<NUMPAD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMPAD>
		<NUMPAD_0 public="1" static="1"><x path="UInt"/></NUMPAD_0>
		<NUMPAD_1 public="1" static="1"><x path="UInt"/></NUMPAD_1>
		<NUMPAD_2 public="1" static="1"><x path="UInt"/></NUMPAD_2>
		<NUMPAD_3 public="1" static="1"><x path="UInt"/></NUMPAD_3>
		<NUMPAD_4 public="1" static="1"><x path="UInt"/></NUMPAD_4>
		<NUMPAD_5 public="1" static="1"><x path="UInt"/></NUMPAD_5>
		<NUMPAD_6 public="1" static="1"><x path="UInt"/></NUMPAD_6>
		<NUMPAD_7 public="1" static="1"><x path="UInt"/></NUMPAD_7>
		<NUMPAD_8 public="1" static="1"><x path="UInt"/></NUMPAD_8>
		<NUMPAD_9 public="1" static="1"><x path="UInt"/></NUMPAD_9>
		<NUMPAD_ADD public="1" static="1"><x path="UInt"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" static="1"><x path="UInt"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" static="1"><x path="UInt"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" static="1"><x path="UInt"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" static="1"><x path="UInt"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" static="1"><x path="UInt"/></NUMPAD_SUBTRACT>
		<O public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</O>
		<P public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</P>
		<PAGE_DOWN public="1" static="1"><x path="UInt"/></PAGE_DOWN>
		<PAGE_UP public="1" static="1"><x path="UInt"/></PAGE_UP>
		<PAUSE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PAUSE>
		<PERIOD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PERIOD>
		<PLAY public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PLAY>
		<PREVIOUS public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PREVIOUS>
		<Q public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Q>
		<QUOTE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</QUOTE>
		<R public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</R>
		<RECORD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RECORD>
		<RED public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RED>
		<REWIND public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</REWIND>
		<RIGHT public="1" static="1"><x path="UInt"/></RIGHT>
		<RIGHTBRACKET public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</RIGHTBRACKET>
		<S public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</S>
		<SEARCH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SEARCH>
		<SEMICOLON public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SEMICOLON>
		<SETUP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SETUP>
		<SHIFT public="1" static="1"><x path="UInt"/></SHIFT>
		<SKIP_BACKWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_BACKWARD>
		<SKIP_FORWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_FORWARD>
		<SLASH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SLASH>
		<SPACE public="1" static="1"><x path="UInt"/></SPACE>
		<STOP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</STOP>
		<STRING_BEGIN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BEGIN>
		<STRING_BREAK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BREAK>
		<STRING_CLEARDISPLAY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARDISPLAY>
		<STRING_CLEARLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARLINE>
		<STRING_DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETE>
		<STRING_DELETECHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETECHAR>
		<STRING_DELETELINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETELINE>
		<STRING_DOWNARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DOWNARROW>
		<STRING_END public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_END>
		<STRING_EXECUTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_EXECUTE>
		<STRING_F1 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F1>
		<STRING_F10 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F10>
		<STRING_F11 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F11>
		<STRING_F12 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F12>
		<STRING_F13 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F13>
		<STRING_F14 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F14>
		<STRING_F15 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F15>
		<STRING_F16 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F16>
		<STRING_F17 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F17>
		<STRING_F18 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F18>
		<STRING_F19 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F19>
		<STRING_F2 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F2>
		<STRING_F20 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F20>
		<STRING_F21 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F21>
		<STRING_F22 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F22>
		<STRING_F23 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F23>
		<STRING_F24 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F24>
		<STRING_F25 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F25>
		<STRING_F26 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F26>
		<STRING_F27 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F27>
		<STRING_F28 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F28>
		<STRING_F29 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F29>
		<STRING_F3 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F3>
		<STRING_F30 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F30>
		<STRING_F31 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F31>
		<STRING_F32 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F32>
		<STRING_F33 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F33>
		<STRING_F34 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F34>
		<STRING_F35 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F35>
		<STRING_F4 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F4>
		<STRING_F5 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F5>
		<STRING_F6 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F6>
		<STRING_F7 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F7>
		<STRING_F8 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F8>
		<STRING_F9 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F9>
		<STRING_FIND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_FIND>
		<STRING_HELP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HELP>
		<STRING_HOME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HOME>
		<STRING_INSERT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERT>
		<STRING_INSERTCHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTCHAR>
		<STRING_INSERTLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTLINE>
		<STRING_LEFTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_LEFTARROW>
		<STRING_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MENU>
		<STRING_MODESWITCH public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MODESWITCH>
		<STRING_NEXT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_NEXT>
		<STRING_PAGEDOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEDOWN>
		<STRING_PAGEUP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEUP>
		<STRING_PAUSE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAUSE>
		<STRING_PREV public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PREV>
		<STRING_PRINT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINT>
		<STRING_PRINTSCREEN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINTSCREEN>
		<STRING_REDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_REDO>
		<STRING_RESET public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RESET>
		<STRING_RIGHTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RIGHTARROW>
		<STRING_SCROLLLOCK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SCROLLLOCK>
		<STRING_SELECT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SELECT>
		<STRING_STOP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_STOP>
		<STRING_SYSREQ public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSREQ>
		<STRING_SYSTEM public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSTEM>
		<STRING_UNDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UNDO>
		<STRING_UPARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UPARROW>
		<STRING_USER public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_USER>
		<SUBTITLE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SUBTITLE>
		<T public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</T>
		<TAB public="1" static="1"><x path="UInt"/></TAB>
		<U public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</U>
		<UP public="1" static="1"><x path="UInt"/></UP>
		<V public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</V>
		<VOD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</VOD>
		<W public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</W>
		<X public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</X>
		<Y public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Y>
		<YELLOW public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</YELLOW>
		<Z public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Z>
		<capsLock public="1" set="null" static="1"><x path="Bool"/></capsLock>
		<hasVirtualKeyboard public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</hasVirtualKeyboard>
		<numLock public="1" set="null" static="1"><x path="Bool"/></numLock>
		<physicalKeyboardType public="1" set="null" static="1">
			<e path="flash.ui.KeyboardType"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</physicalKeyboardType>
		<isAccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAccessible>
	</class>
	<enum path="flash.ui.KeyboardType" params="" file="C:\code\haxe/std/flash/ui/KeyboardType.hx">
		<NONE/>
		<KEYPAD/>
		<ALPHANUMERIC/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.utils.IDataInput" params="" file="C:\code\haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="C:\code\haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="C:\code\haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="C:\code\haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="C:\code\haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<atomicCompareAndSwapLength public="1" set="method">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<atomicCompareAndSwapIntAt public="1" set="method">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<position public="1"><x path="UInt"/></position>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<length public="1"><x path="UInt"/></length>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\code\haxe/std/flash/utils/CompressionAlgorithm.hx">
		<ZLIB/>
		<LZMA/>
		<DEFLATE/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<enum path="flash.utils.Endian" params="" file="C:\code\haxe/std/flash/utils/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="C:\code\haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="C:\code\haxe/std/flash/utils/Namespace.hx" extern="1">
		<uri public="1" set="null"><c path="String"/></uri>
		<prefix public="1" set="null"><d/></prefix>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\code\haxe/std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.QName" params="" file="C:\code\haxe/std/flash/utils/QName.hx" extern="1">
		<uri public="1" set="null"><d/></uri>
		<localName public="1" set="null"><c path="String"/></localName>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.RegExp" params="" file="C:\code\haxe/std/flash/utils/RegExp.hx" extern="1">
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<source public="1" set="null"><c path="String"/></source>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<global public="1" set="null"><x path="Bool"/></global>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.xml.XML" params="" file="C:\code\haxe/std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\code\haxe/std/flash/xml/XMLList.hx" extern="1">
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="gibber.AdvancedParser" params="" file="src/gibber/AdvancedParser.hx">
		<portalMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PortalCmp"/></c></portalMapper>
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<god><c path="gibber.God"/></god>
		<parse public="1" set="method" line="32"><f a="command">
	<c path="String"/>
	<c path="String"/>
</f></parse>
		<initialize public="1" set="method" line="26"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="21"><f a="g">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.CmdFactory" params="" file="src/gibber/CmdFactory.hx">
		<createCmd public="1" set="method" line="16"><f a="commandName:args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="gibber.commands.Command"/>
</f></createCmd>
		<god public="1">
			<c path="gibber.God"/>
			<meta><m n=":isVar"/></meta>
		</god>
		<new public="1" set="method" line="12"><f a="god">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="gibber.Commander" params="" file="src/gibber/Commander.hx">
		<portalMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PortalCmp"/></c></portalMapper>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<graphMgr><c path="gibber.managers.SectorGraphMgr"/></graphMgr>
		<god><c path="gibber.God"/></god>
		<getSectorLook public="1" set="method" line="54"><f a="sector">
	<c path="com.artemisx.Entity"/>
	<c path="String"/>
</f></getSectorLook>
		<goToSector public="1" set="method" line="39"><f a="mover:destSector">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></goToSector>
		<goToPosition public="1" set="method" line="32"><f a="mover:newLoc">
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
	<x path="Void"/>
</f></goToPosition>
		<initialize public="1" set="method" line="25"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="20"><f a="g">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.EntityBuilder" params="" file="src/gibber/EntityBuilder.hx">
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<containerMgr><c path="gibber.managers.ContainerMgr"/></containerMgr>
		<world><c path="com.artemisx.World"/></world>
		<god><c path="gibber.God"/></god>
		<pipeDebug public="1" set="method" line="267"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></pipeDebug>
		<createEntityWithCmps public="1" set="method" line="254"><f a="cmps">
	<c path="List"><c path="com.artemisx.Component"/></c>
	<c path="com.artemisx.Entity"/>
</f></createEntityWithCmps>
		<createObject public="1" set="method" line="221"><f a="name:pos:?lookText">
	<c path="String"/>
	<c path="utils.Vec2"/>
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
</f></createObject>
		<createTransitRequest public="1" set="method" line="210"><f a="mover:destSector:transitScript">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="gibber.scripts.TransitScript"/>
	<c path="com.artemisx.Entity"/>
</f></createTransitRequest>
		<createSector public="1" set="method" line="185"><f a="name:pos:polygonAreas">
	<c path="String"/>
	<c path="utils.Vec2"/>
	<c path="Array"><c path="utils.Polygon"/></c>
	<c path="com.artemisx.Entity"/>
</f></createSector>
		<create2Portal public="1" set="method" line="135"><f a="name:s1:s2:posS1">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
	<t path="gibber.P2"/>
</f></create2Portal>
		<createPortal public="1" set="method" line="108"><f a="name:pos">
	<c path="String"/>
	<c path="utils.Vec2"/>
	<c path="com.artemisx.Entity"/>
</f></createPortal>
		<createPlayer public="1" set="method" line="83"><f a="name:sector">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
</f></createPlayer>
		<createWordRef public="1" set="method" line="72"><f a="tag">
	<c path="gibber.gabby.SynTag"/>
	<c path="com.artemisx.Entity"/>
</f></createWordRef>
		<doubleEdge public="1" set="method" line="67"><f a="portal:s1:s2">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></doubleEdge>
		<addPortalEdges public="1" set="method" line="46"><f a="portal:edges">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="gibber.gabby.PortalEdge"/></c>
	<x path="Void"/>
</f></addPortalEdges>
		<init public="1" set="method" line="40"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="33"><f a="g">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.EntityDeserializer" params="" file="src/gibber/EntityDeserializer.hx">
		<recursiveCompile set="method" line="132"><f a="obj">
	<d/>
	<d/>
</f></recursiveCompile>
		<resolve set="method" line="112"><f a="str">
	<c path="String"/>
	<d/>
</f></resolve>
		<fromJson public="1" set="method" line="76"><f a="json">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
</f></fromJson>
		<fromFile public="1" set="method" line="61"><f a="file:?processFile">
	<c path="String"/>
	<f a="data">
		<c path="String"/>
		<c path="com.artemisx.Entity"/>
	</f>
	<x path="Void"/>
</f></fromFile>
		<defaultDeserializeFromFile set="method" line="57"><f a="data">
	<c path="String"/>
	<c path="com.artemisx.Entity"/>
</f></defaultDeserializeFromFile>
		<buildClasspathTable set="method" line="43"><f a=""><x path="Void"/></f></buildClasspathTable>
		<classpathTable><c path="haxe.ds.StringMap"><c path="String"/></c></classpathTable>
		<containerMgr set="null">
			<c path="gibber.managers.ContainerMgr"/>
			<meta><m n=":isVar"/></meta>
		</containerMgr>
		<god set="null">
			<c path="gibber.God"/>
			<meta><m n=":isVar"/></meta>
		</god>
		<nameRegistry set="null">
			<c path="gibber.managers.NameRegistry"/>
			<meta><m n=":isVar"/></meta>
		</nameRegistry>
		<entityBuilder set="null">
			<c path="gibber.EntityBuilder"/>
			<meta><m n=":isVar"/></meta>
		</entityBuilder>
		<RESOURCE_PATH public="1" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</RESOURCE_PATH>
		<new public="1" set="method" line="32"><f a="god">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.EntityResolver" params="" file="src/gibber/EntityResolver.hx">
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<nr><c path="gibber.managers.NameRegistry"/></nr>
		<cm><c path="gibber.managers.ContainerMgr"/></cm>
		<god><c path="gibber.God"/></god>
		<globalResolve public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
</f></globalResolve>
		<containerResolve public="1" set="method" line="26"><f a="name:containers">
	<c path="String"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
</f></containerResolve>
		<initialize public="1" set="method" line="19"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="14"><f a="god">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.God" params="" file="src/gibber/God.hx">
		<player public="1"><c path="com.artemisx.Entity"/></player>
		<portals public="1"><c path="Array"><c path="com.artemisx.Entity"/></c></portals>
		<sectors public="1"><c path="Array"><c path="com.artemisx.Entity"/></c></sectors>
		<commander public="1"><c path="gibber.Commander"/></commander>
		<parser><c path="gibber.AdvancedParser"/></parser>
		<testBed><c path="gibber.TestBed"/></testBed>
		<outputTextfield public="1"><c path="flash.text.TextField"/></outputTextfield>
		<baseTextFormat><c path="flash.text.TextFormat"/></baseTextFormat>
		<inputTextfield><c path="flash.text.TextField"/></inputTextfield>
		<root><c path="flash.display.MovieClip"/></root>
		<debugClear public="1" set="method" line="220"><f a=""><x path="Void"/></f></debugClear>
		<debugPrintln public="1" set="method" line="209"><f a="str:?fromInput">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></debugPrintln>
		<debugPrint public="1" set="method" line="204"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></debugPrint>
		<onEnterKey set="method" line="185"><f a="e">
	<c path="flash.events.KeyboardEvent"/>
	<x path="Void"/>
</f></onEnterKey>
		<input set="method" line="169"><f a=""><x path="Void"/></f></input>
		<tick public="1" set="method" line="163"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></tick>
		<initializeEntities public="1" set="method" line="118"><f a=""><x path="Void"/></f></initializeEntities>
		<initializeSystems public="1" set="method" line="97"><f a=""><x path="Void"/></f></initializeSystems>
		<setupConsole public="1" set="method" line="70"><f a=""><x path="Void"/></f></setupConsole>
		<entityResolver public="1" set="null">
			<c path="gibber.EntityResolver"/>
			<meta><m n=":isVar"/></meta>
		</entityResolver>
		<sf public="1" set="null">
			<c path="gibber.ScriptFactory"/>
			<meta><m n=":isVar"/></meta>
		</sf>
		<entityDeserializer public="1" set="null">
			<c path="gibber.EntityDeserializer"/>
			<meta><m n=":isvar"/></meta>
		</entityDeserializer>
		<entityBuilder public="1" set="null">
			<c path="gibber.EntityBuilder"/>
			<meta><m n=":isVar"/></meta>
		</entityBuilder>
		<cf public="1" set="null">
			<c path="gibber.CmdFactory"/>
			<meta><m n=":isVar"/></meta>
		</cf>
		<world public="1" set="null">
			<c path="com.artemisx.World"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<new public="1" set="method" line="39"><f a="r">
	<c path="flash.display.MovieClip"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="gibber.P2" params="" file="src/gibber/God.hx" module="gibber.God"><a>
	<p2><c path="com.artemisx.Entity"/></p2>
	<p1><c path="com.artemisx.Entity"/></p1>
</a></typedef>
	<class path="gibber.ScriptFactory" params="" file="src/gibber/ScriptFactory.hx">
		<god><c path="gibber.God"/></god>
		<createScript public="1" set="method" line="12"><f a="name">
	<c path="String"/>
	<c path="gibber.scripts.TransitScript"/>
</f></createScript>
		<new public="1" set="method" line="7"><f a="god">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.TestBed" params="" file="src/gibber/TestBed.hx">
		<mgr><c path="gibber.managers.SynonymMgr"/></mgr>
		<sectors><c path="Array"><c path="com.artemisx.Entity"/></c></sectors>
		<player><c path="com.artemisx.Entity"/></player>
		<entityBuilder><c path="gibber.EntityBuilder"/></entityBuilder>
		<god><c path="gibber.God"/></god>
		<tick public="1" set="method" line="48"><f a=""><x path="Void"/></f></tick>
		<initializeEntities public="1" set="method" line="23"><f a=""><x path="Void"/></f></initializeEntities>
		<run public="1" set="method" line="17"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="13"><f a="g">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.Util" params="" file="src/gibber/Util.hx">
		<init public="1" set="method" line="10" static="1"><f a="g">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></init>
		<worldCoords public="1" set="method" line="15" static="1"><f a="pos:sector">
	<c path="utils.Vec2"/>
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
</f></worldCoords>
		<sectorCoords public="1" set="method" line="19" static="1"><f a="pos:ref:tar">
	<c path="utils.Vec2"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
</f></sectorCoords>
		<localCoords public="1" set="method" line="23" static="1"><f a="pos:local">
	<c path="utils.Vec2"/>
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
</f></localCoords>
		<realInsert public="1" params="T" get="inline" set="null" line="29" static="1"><f a="a:i:v">
	<c path="Array"><c path="realInsert.T"/></c>
	<x path="Int"/>
	<c path="realInsert.T"/>
	<x path="Void"/>
</f></realInsert>
		<clear public="1" set="method" line="37" static="1"><f a="s">
	<c path="List"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></clear>
		<god static="1"><c path="gibber.God"/></god>
		<posMapper static="1"><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
	</class>
	<enum path="gibber.commands.TCmdRes" params="" file="src/gibber/commands/Command.hx" module="gibber.commands.Command">
		<PENDING/>
		<PASS/>
		<NEW/>
		<FAIL/>
		<CRITICAL/>
	</enum>
	<class path="gibber.commands.Command" params="" file="src/gibber/commands/Command.hx" interface="1">
		<onFinished public="1" set="method"><f a=""><x path="Void"/></f></onFinished>
		<Execute public="1" set="method"><f a=""><c path="Array"><d/></c></f></Execute>
		<onStart public="1" set="method"><f a=""><x path="Void"/></f></onStart>
		<state public="1">
			<e path="gibber.commands.TCmdRes"/>
			<meta><m n=":isVar"/></meta>
		</state>
	</class>
	<class path="gibber.commands.MoveCmd" params="" file="src/gibber/commands/MoveCmd.hx">
		<implements path="gibber.commands.Command"/>
		<__rtti public="1" line="12" static="1"><c path="String"/></__rtti>
		<cf><c path="gibber.CmdFactory"/></cf>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<onFinished public="1" set="method" line="49"><f a=""><x path="Void"/></f></onFinished>
		<Execute public="1" set="method" line="34"><f a=""><c path="Array"><d/></c></f></Execute>
		<onStart public="1" set="method" line="30"><f a=""><x path="Void"/></f></onStart>
		<state public="1">
			<e path="gibber.commands.TCmdRes"/>
			<meta><m n=":isVar"/></meta>
		</state>
		<e public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</e>
		<sector public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</sector>
		<dest public="1">
			<c path="utils.Vec2"/>
			<meta><m n=":isVar"/></meta>
		</dest>
		<new set="method" line="20"><f a="cf:e:dest:sector">
	<c path="gibber.CmdFactory"/>
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.commands.TakeCmd" params="" file="src/gibber/commands/TakeCmd.hx">
		<implements path="gibber.commands.Command"/>
		<__rtti public="1" line="15" static="1"><c path="String"/></__rtti>
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<containableMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.ContainableCmp"/></c></containableMapper>
		<containerMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.ContainerCmp"/></c></containerMapper>
		<cf><c path="gibber.CmdFactory"/></cf>
		<onFinished public="1" set="method" line="60"><f a=""><x path="Void"/></f></onFinished>
		<Execute public="1" set="method" line="46"><f a=""><c path="Array"><d/></c></f></Execute>
		<onStart public="1" set="method" line="33"><f a=""><x path="Void"/></f></onStart>
		<state public="1">
			<e path="gibber.commands.TCmdRes"/>
			<meta><m n=":isVar"/></meta>
		</state>
		<newLoc public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</newLoc>
		<oldLoc public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</oldLoc>
		<obj public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</obj>
		<new public="1" set="method" line="22"><f a="cf:obj:newLoc">
	<c path="gibber.CmdFactory"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.commands.TransitCmd" params="" file="src/gibber/commands/TransitCmd.hx">
		<implements path="gibber.commands.Command"/>
		<__rtti public="1" line="11" static="1"><c path="String"/></__rtti>
		<progressState><x path="Int"/></progressState>
		<onFinished public="1" set="method" line="42"><f a=""><x path="Void"/></f></onFinished>
		<Execute public="1" set="method" line="32"><f a=""><c path="Array"><d/></c></f></Execute>
		<onStart public="1" set="method" line="28"><f a=""><x path="Void"/></f></onStart>
		<portal public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</portal>
		<state public="1">
			<e path="gibber.commands.TCmdRes"/>
			<meta><m n=":isVar"/></meta>
		</state>
		<edge public="1">
			<c path="gibber.gabby.PortalEdge"/>
			<meta><m n=":isVar"/></meta>
		</edge>
		<mover public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</mover>
		<new public="1" set="method" line="20"><f a="mover:portal:?portalEdge">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="gibber.gabby.PortalEdge"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.CharCmp" params="" file="src/gibber/components/CharCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="6" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.CmdQueue" params="" file="src/gibber/components/CmdQueue.hx">
		<implements path="com.artemisx.Component"/>
		<cmds><c path="List"><c path="gibber.commands.Command"/></c></cmds>
		<clear public="1" set="method" line="24"><f a=""><x path="Void"/></f></clear>
		<first public="1" set="method" line="20"><f a=""><c path="gibber.commands.Command"/></f></first>
		<dequeue public="1" set="method" line="16"><f a=""><c path="gibber.commands.Command"/></f></dequeue>
		<enqueue public="1" set="method" line="12"><f a="cmd">
	<c path="gibber.commands.Command"/>
	<x path="Void"/>
</f></enqueue>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.components.ContainableCmp" params="" file="src/gibber/components/ContainableCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="8" static="1"><c path="String"/></__rtti>
		<set_container set="method" line="21"><f a="newContainer">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
</f></set_container>
		<mgr><c path="gibber.managers.ContainerMgr"/></mgr>
		<parent public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</parent>
		<container public="1" set="accessor">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</container>
		<new public="1" set="method" line="13"><f a="mgr:parent:?container">
	<c path="gibber.managers.ContainerMgr"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.ContainerCmp" params="" file="src/gibber/components/ContainerCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="9" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.InventoryCmp" params="" file="src/gibber/components/InventoryCmp.hx">
		<implements path="com.artemisx.Component"/>
		<holderEntityRef public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</holderEntityRef>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.components.LookCmp" params="" file="src/gibber/components/LookCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="5" static="1"><c path="String"/></__rtti>
		<lookText public="1">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</lookText>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.NameIdCmp" params="" file="src/gibber/components/NameIdCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="7" static="1"><c path="String"/></__rtti>
		<syns public="1">
			<c path="gibber.gabby.SynTag"/>
			<meta><m n=":isVar"/></meta>
		</syns>
		<name public="1">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</name>
		<tagEntityRef public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</tagEntityRef>
		<new public="1" set="method" line="13"><f a="n">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.PortalCmp" params="" file="src/gibber/components/PortalCmp.hx">
		<implements path="com.artemisx.Component"/>
		<edges public="1">
			<c path="Array"><c path="gibber.gabby.PortalEdge"/></c>
			<meta><m n=":isVar"/></meta>
		</edges>
		<new public="1" set="method" line="12"><f a="?edges">
	<c path="Array"><c path="gibber.gabby.PortalEdge"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.components.PosCmp" params="" file="src/gibber/components/PosCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="10" static="1"><c path="String"/></__rtti>
		<dp public="1">
			<c path="utils.Vec2"/>
			<meta><m n=":isVar"/></meta>
		</dp>
		<pos public="1">
			<c path="utils.Vec2"/>
			<meta><m n=":isVar"/></meta>
		</pos>
		<sector public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</sector>
		<regionsIn public="1">
			<c path="List"><c path="com.artemisx.Entity"/></c>
			<meta><m n=":isVar"/></meta>
		</regionsIn>
		<new public="1" set="method" line="17"><f a="sec:pos">
	<c path="com.artemisx.Entity"/>
	<c path="utils.Vec2"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.RegionCmp" params="" file="src/gibber/components/RegionCmp.hx">
		<implements path="com.artemisx.Component"/>
		<exitScript><c path="gibber.scripts.VoidExecuteScript"/></exitScript>
		<enterScript><c path="gibber.scripts.VoidExecuteScript"/></enterScript>
		<onExit public="1" set="method" line="36"><f a="mover:toSector">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onExit>
		<onEnter public="1" set="method" line="30"><f a="mover:fromSector">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnter>
		<isOpen public="1">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</isOpen>
		<adj public="1">
			<c path="Array"><c path="com.artemisx.Entity"/></c>
			<meta><m n=":isVar"/></meta>
		</adj>
		<owner public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</owner>
		<parent public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</parent>
		<polys public="1">
			<c path="Array"><c path="utils.Polygon"/></c>
			<meta><m n=":isVar"/></meta>
		</polys>
		<new public="1" set="method" line="16"><f a="?polygonAreas:?parent:?enter:?exit">
	<c path="Array"><c path="utils.Polygon"/></c>
	<c path="com.artemisx.Entity"/>
	<c path="gibber.scripts.VoidExecuteScript"/>
	<c path="gibber.scripts.VoidExecuteScript"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.components.RenderCmp" params="" file="src/gibber/components/RenderCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="7" static="1"><c path="String"/></__rtti>
		<colour public="1">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</colour>
		<sprite public="1">
			<c path="flash.display.Sprite"/>
			<meta><m n=":isVar"/></meta>
		</sprite>
		<new public="1" set="method" line="12"><f a="?colour">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.StaticPosCmp" params="" file="src/gibber/components/StaticPosCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="6" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.SynListCmp" params="" file="src/gibber/components/SynListCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="7" static="1"><c path="String"/></__rtti>
		<tag public="1">
			<c path="gibber.gabby.SynTag"/>
			<meta><m n=":isVar"/></meta>
		</tag>
		<new public="1" set="method" line="11"><f a="tag">
	<c path="gibber.gabby.SynTag"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.components.TakeCmp" params="" file="src/gibber/components/TakeCmp.hx">
		<implements path="com.artemisx.Component"/>
		<container public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</container>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.components.TransitRequestCmp" params="" file="src/gibber/components/TransitRequestCmp.hx">
		<implements path="com.artemisx.Component"/>
		<progressState><x path="Int"/></progressState>
		<transitScript public="1" set="null">
			<c path="gibber.scripts.TransitScript"/>
			<meta><m n=":isVar"/></meta>
		</transitScript>
		<destSector public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</destSector>
		<mover public="1" set="null">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</mover>
		<new public="1" set="method" line="9"><f a="mover:destSector:?transit">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="gibber.scripts.TransitScript"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.components.UsageCmp" params="" file="src/gibber/components/UsageCmp.hx">
		<implements path="com.artemisx.Component"/>
		<__rtti public="1" line="5" static="1"><c path="String"/></__rtti>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="gibber.gabby.PortalEdge" params="" file="src/gibber/gabby/PortalEdge.hx">
		<getDestSector public="1" set="method" line="22"><f a=""><c path="com.artemisx.Entity"/></f></getDestSector>
		<getSrcSector public="1" set="method" line="18"><f a=""><c path="com.artemisx.Entity"/></f></getSrcSector>
		<transitScript public="1">
			<c path="gibber.scripts.TransitScript"/>
			<meta><m n=":isVar"/></meta>
		</transitScript>
		<pDest public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</pDest>
		<pSrc public="1">
			<c path="com.artemisx.Entity"/>
			<meta><m n=":isVar"/></meta>
		</pSrc>
		<new public="1" set="method" line="12"><f a="srcSec:destSec:transitScript">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="gibber.scripts.TransitScript"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.gabby.SynTag" params="" file="src/gibber/gabby/SynTag.hx">
		<implements path="com.artemisx.Component"/>
		<isMatch public="1" set="method" line="18"><f a="word">
	<c path="String"/>
	<x path="Bool"/>
</f></isMatch>
		<synonyms public="1">
			<c path="List"><c path="String"/></c>
			<meta><m n=":isVar"/></meta>
		</synonyms>
		<entityNameId public="1">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</entityNameId>
		<name public="1">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</name>
		<new public="1" set="method" line="12"><f a="name:entityNameId:synonyms">
	<c path="String"/>
	<c path="String"/>
	<c path="List"><c path="String"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.managers.ContainerMgr" params="" file="src/gibber/managers/ContainerMgr.hx">
		<extends path="com.artemisx.Manager"/>
		<aspectMap><c path="Array"><a>
	<name><c path="String"/></name>
	<aspect><c path="com.artemisx.Aspect"/></aspect>
</a></c></aspectMap>
		<containableMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.ContainableCmp"/></c></containableMapper>
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<entityContainer><c path="haxe.ds.StringMap"><c path="com.artemisx.Entity"/></c></entityContainer>
		<containerEntities><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap"><c path="Array"><c path="com.artemisx.Entity"/></c></c></c></containerEntities>
		<getContainerOfEntity public="1" set="method" line="192"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
</f></getContainerOfEntity>
		<getEntitiesOfContainer public="1" set="method" line="182"><f a="container:aspect">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Aspect"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
</f></getEntitiesOfContainer>
		<getAllEntitiesOfContainer public="1" set="method" line="172"><f a="container">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
</f></getAllEntitiesOfContainer>
		<changeContainerOfEntity public="1" set="method" line="167"><f a="e:oldContainer:newContainer">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></changeContainerOfEntity>
		<registerAspect public="1" set="method" line="159"><f a="n:a">
	<c path="String"/>
	<c path="com.artemisx.Aspect"/>
	<x path="Void"/>
</f></registerAspect>
		<getAspectName public="1" set="method" line="147"><f a="toMatch">
	<c path="com.artemisx.utils.Bitset"/>
	<c path="String"/>
</f></getAspectName>
		<onChanged public="1" set="method" line="143" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onDeleted public="1" set="method" line="72" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onAdded public="1" set="method" line="33" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<initialize public="1" set="method" line="28" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="gibber.managers.EType" params="" file="src/gibber/managers/NameRegistry.hx" module="gibber.managers.NameRegistry">
		<SECTOR/>
		<PORTAL/>
		<OBJ/>
		<ITEM/>
		<CHAR/>
	</enum>
	<class path="gibber.managers.NameRegistry" params="" file="src/gibber/managers/NameRegistry.hx">
		<extends path="com.artemisx.managers.TagManager"/>
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<onAdded public="1" set="method" line="39" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<initialize public="1" set="method" line="35" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.managers.SectorGraphMgr" params="" file="src/gibber/managers/SectorGraphMgr.hx">
		<extends path="com.artemisx.Manager"/>
		<subsectorSig public="1" line="20" static="1"><c path="com.artemisx.Aspect"/></subsectorSig>
		<sectorSig public="1" line="21" static="1"><c path="com.artemisx.Aspect"/></sectorSig>
		<portalMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PortalCmp"/></c></portalMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<adjMat><c path="Array"><c path="Array"><c path="Array"><c path="com.artemisx.Entity"/></c></c></c></adjMat>
		<sectorIndex><c path="Array"><c path="com.artemisx.Entity"/></c></sectorIndex>
		<onChanged public="1" set="method" line="137" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<indexOf public="1" get="inline" set="null" line="132"><f a="sector">
	<c path="com.artemisx.Entity"/>
	<x path="Int"/>
</f></indexOf>
		<getEdges public="1" set="method" line="124"><f a="srcSector:destSector">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
</f></getEdges>
		<onDeleted public="1" set="method" line="70" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onAdded public="1" set="method" line="33" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<initialize public="1" set="method" line="27" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.managers.SynonymMgr" params="" file="src/gibber/managers/SynonymMgr.hx">
		<extends path="com.artemisx.Manager"/>
		<entitiesFromSynonyms><c path="haxe.ds.StringMap"><c path="List"><c path="String"/></c></c></entitiesFromSynonyms>
		<synonymsFromEntity><c path="haxe.ds.StringMap"><c path="List"><c path="String"/></c></c></synonymsFromEntity>
		<nameMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.NameIdCmp"/></c></nameMapper>
		<tagMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.SynListCmp"/></c></tagMapper>
		<nameRegistry><c path="gibber.managers.NameRegistry"/></nameRegistry>
		<onDeleted public="1" set="method" line="65" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onAdded public="1" set="method" line="36" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<initialize public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.scripts.Script" params="" file="src/gibber/scripts/Script.hx" interface="1"/>
	<class path="gibber.scripts.GenericScript" params="" file="src/gibber/scripts/GenericScript.hx">
		<implements path="gibber.scripts.Script"/>
		<scriptBase><c path="gibber.ScriptFactory"/></scriptBase>
		<execute public="1" set="method" line="14"><f a="invoker:invokees:params">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="String"/></c>
	<a>
		<res><e path="gibber.scripts.ExeRes"/></res>
		<outs><c path="Array"><d/></c></outs>
		<msg><c path="String"/></msg>
	</a>
</f></execute>
		<codes public="1">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</codes>
		<new public="1" set="method" line="9"><f a="scriptBase:codes">
	<c path="gibber.ScriptFactory"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="gibber.scripts.ExeRes" params="" file="src/gibber/scripts/Script.hx" module="gibber.scripts.Script">
		<PASS/>
		<FAIL/>
	</enum>
	<class path="gibber.scripts.TransitScript" params="" file="src/gibber/scripts/TransitScript.hx">
		<god><c path="gibber.God"/></god>
		<execute public="1" set="method" line="16"><f a="mover:pSrc:pDest">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.Entity"/>
	<c path="Array"><d/></c>
</f></execute>
		<new public="1" set="method" line="12"><f a="god">
	<c path="gibber.God"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.scripts.VoidExecuteScript" params="" file="src/gibber/scripts/VoidExecuteScript.hx">
		<execute public="1" set="method" line="10"><f a=""><x path="Void"/></f></execute>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.systems.CmdProcessSys" params="" file="src/gibber/systems/CmdProcessSys.hx">
		<extends path="com.artemisx.EntitySystem"/>
		<queueMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.CmdQueue"/></c></queueMapper>
		<processEntities public="1" set="method" line="20" override="1"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<initialize public="1" set="method" line="16" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.systems.PhysicsSys" params="" file="src/gibber/systems/PhysicsSys.hx">
		<extends path="com.artemisx.EntitySystem"/>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<once><x path="Bool"/></once>
		<processEntities public="1" set="method" line="28" override="1"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<initialize public="1" set="method" line="23" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.systems.RenderSectorSys" params="" file="src/gibber/systems/RenderSectorSys.hx">
		<extends path="com.artemisx.EntitySystem"/>
		<buffer><c path="flash.display.Sprite"/></buffer>
		<root><c path="flash.display.MovieClip"/></root>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<renderMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RenderCmp"/></c></renderMapper>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<processEntities public="1" set="method" line="44" override="1"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<onRemoved public="1" set="method" line="40" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onRemoved>
		<onInserted public="1" set="method" line="34" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onInserted>
		<initialize public="1" set="method" line="28" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="20"><f a="root">
	<c path="flash.display.MovieClip"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.systems.RenderSys" params="" file="src/gibber/systems/RenderSys.hx">
		<extends path="com.artemisx.EntitySystem"/>
		<entitySpriteMap><c path="List"><a>
	<s><c path="flash.display.Sprite"/></s>
	<e><c path="com.artemisx.Entity"/></e>
</a></c></entitySpriteMap>
		<buffer><c path="flash.display.Sprite"/></buffer>
		<root><c path="flash.display.MovieClip"/></root>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<renderMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RenderCmp"/></c></renderMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<processEntities public="1" set="method" line="58" override="1"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<onChanged public="1" set="method" line="47" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onRemoved public="1" set="method" line="43" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onRemoved>
		<onInserted public="1" set="method" line="36" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onInserted>
		<initialize public="1" set="method" line="30" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="21"><f a="root">
	<c path="flash.display.MovieClip"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="gibber.systems.TransitRequestSys" params="" file="src/gibber/systems/TransitRequestSys.hx">
		<extends path="com.artemisx.EntitySystem"/>
		<transitMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.TransitRequestCmp"/></c></transitMapper>
		<regionMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.RegionCmp"/></c></regionMapper>
		<posMapper><c path="com.artemisx.ComponentMapper"><c path="gibber.components.PosCmp"/></c></posMapper>
		<transit set="method" line="35"><f a="req">
	<c path="gibber.components.TransitRequestCmp"/>
	<x path="Bool"/>
</f></transit>
		<process public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></process>
		<initialize public="1" set="method" line="18" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="gibber.teracts.Teract" params="" file="src/gibber/teracts/Teract.hx" interface="1">
		<executeEffect public="1" set="method"><f a="invoker:invokees:params">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></executeEffect>
		<matchParams public="1" set="method"><f a="invoker:invokees:params">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="String"/></c>
	<a>
		<msg><c path="String"/></msg>
		<match><e path="gibber.teracts.TMatch"/></match>
	</a>
</f></matchParams>
		<syns public="1"><c path="gibber.gabby.SynTag"/></syns>
	</class>
	<class path="gibber.teracts.LookTeract" params="" file="src/gibber/teracts/LookTeract.hx">
		<implements path="gibber.teracts.Teract"/>
		<lookScript><c path="gibber.scripts.GenericScript"/></lookScript>
		<god><c path="gibber.God"/></god>
		<executeEffect public="1" set="method" line="30"><f a="invoker:invokees:params">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></executeEffect>
		<matchParams public="1" set="method" line="21"><f a="invoker:invokees:params">
	<c path="com.artemisx.Entity"/>
	<c path="Array"><c path="com.artemisx.Entity"/></c>
	<c path="Array"><c path="String"/></c>
	<a>
		<msg><c path="String"/></msg>
		<match><e path="gibber.teracts.TMatch"/></match>
	</a>
</f></matchParams>
		<syns public="1">
			<c path="gibber.gabby.SynTag"/>
			<meta><m n=":isVar"/></meta>
		</syns>
		<new set="method" line="15"><f a="god:syns">
	<c path="gibber.God"/>
	<c path="gibber.gabby.SynTag"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="gibber.teracts.TMatch" params="" file="src/gibber/teracts/Teract.hx" module="gibber.teracts.Teract">
		<NOMATCH/>
		<MATCH/>
	</enum>
	<class path="haxe.EnumTools" params="" file="C:\code\haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum [e], including its path.
		
		If [e] is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If [e] is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If [e] has no package, the enum name is returned.
		
		If [e] is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor [constr] with
		arguments [params].
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor number
		[index] with arguments [params].
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum [e] that require no
		arguments.
		
		This may return the empty Array [] if all constructors of [e] require
		arguments.
		
		Otherwise an instance of [e] constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum [e].
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If [c] is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\code\haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances [a] and [b] by value.
		
		Unlike [a] == [b], this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If [a] or [b] are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance [e].
		
		The result String does not contain any constructor arguments.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance [e].
		
		If [e] has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to [e],
		in the order of their declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance [e].
		
		This corresponds to the original syntactic position of [e]. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Int64" params="" file="C:\code\haxe/std/haxe/Int64.hx">
		<add public="1" set="method" line="98" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></add>
		<uicompare set="method" line="214" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></uicompare>
		<low><x path="Int"/></low>
		<high><x path="Int"/></high>
		<new get="inline" set="null" line="29"><f a="high:low">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Json" params="" file="C:\code\haxe/std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1"><f a="text">
	<c path="String"/>
	<d/>
</f></parse>
		<stringify public="1" set="method" static="1"><f a="value:?replacer">
	<d/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
</f></stringify>
		<haxe_doc>Crossplatform JSON API : it will automatically use the optimized native API if available.
	Use -D haxeJSON to force usage of the haXe implementation even if a native API is found : this will provide
	extra encoding features such as enums (replaced by their index), Hashs and Iterable.</haxe_doc>
		<meta><m n=":native"><e>"JSON"</e></m></meta>
	</class>
	<class path="haxe.Log" params="" file="C:\code\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs [v] in a platform-dependent way.

		The second parameter [infos] is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\code\haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="C:\code\haxe/std/flash/_std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a><name><c path="String"/></name></a></c></content>
		<getString public="1" set="method" line="64" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by [name] as a String.

		If [name] does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<resolve set="method" line="74" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
</f></resolve>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.TypeResolver" params="" file="C:\code\haxe/std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
</a></typedef>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\code\haxe/std/haxe/ds/HashMap.hx"/>
	<class path="haxe.ds.IntMap" params="T" file="C:\code\haxe/std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><c path="flash.utils.Dictionary"/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\code\haxe/std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<typedef path="haxe.rtti.Path" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<line><t path="Null"><x path="Int"/></t></line>
	<isPublic><x path="Bool"/></isPublic>
	<isOverride><x path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="haxe.ds.StringMap"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<supers><c path="Array"><e path="haxe.rtti.CType"/></c></supers>
	<subs><c path="Array"><e path="haxe.rtti.CType"/></c></subs>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\code\haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.Meta" params="" file="C:\code\haxe/std/haxe/rtti/Meta.hx">
		<getFields public="1" set="method" line="56" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="C:\code\haxe/std/haxe/rtti/XmlParser.hx">
		<defplat set="method" line="588"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<xtypeparams set="method" line="581"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<xtype set="method" line="528"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypedef set="method" line="500"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xabstract set="method" line="467"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xenumfield set="method" line="437"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xenum set="method" line="412"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xclassfield set="method" line="386"><f a="x:?defPublic">
	<c path="haxe.xml.Fast"/>
	<x path="Bool"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xclass set="method" line="346"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xpath set="method" line="335"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xmeta set="method" line="324"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<processElement public="1" set="method" line="313"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xerror set="method" line="303"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<mkRights set="method" line="293"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<mkTypeParams set="method" line="286"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkPath set="method" line="282"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<curplatform><c path="String"/></curplatform>
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="C:\code\haxe/std/haxe/xml/Fast.hx">
		<get_elements set="method" line="164"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<get_innerHTML set="method" line="157"><f a=""><c path="String"/></f></get_innerHTML>
		<get_innerData set="method" line="137"><f a=""><c path="String"/></f></get_innerData>
		<get_name set="method" line="133"><f a=""><c path="String"/></f></get_name>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<x public="1" set="null"><c path="Xml"/></x>
		<new public="1" set="method" line="122"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="utils.Geo" params="" file="src/utils/Geo.hx">
		<isPointinPolygon public="1" set="method" line="10" static="1"><f a="poly:point">
	<c path="utils.Polygon"/>
	<c path="utils.Vec2"/>
	<x path="Bool"/>
</f></isPointinPolygon>
		<getClosestPoint public="1" set="method" line="29" static="1"><f a="poly:point">
	<c path="utils.Polygon"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></getClosestPoint>
		<getLineIntersection public="1" set="method" line="52" static="1"><f a="polys:p1:p2">
	<c path="utils.Polygon"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></getLineIntersection>
		<minTransCirclePolygon public="1" set="method" line="69" static="1"><f a="poly:circle">
	<c path="utils.Polygon"/>
	<a>
		<radius><x path="Float"/></radius>
		<pos><c path="utils.Vec2"/></pos>
	</a>
	<c path="utils.Vec2"/>
</f></minTransCirclePolygon>
		<transform public="1" set="method" line="97" static="1"><f a="poly:v">
	<c path="utils.Polygon"/>
	<c path="utils.Vec2"/>
	<c path="utils.Polygon"/>
</f></transform>
		<haxe_doc>* ...
 * @author ...</haxe_doc>
	</class>
	<class path="utils.Key" params="" file="src/utils/Key.hx">
		<kcodes line="5" static="1"><c path="Array"><t path="Null"><x path="Int"/></t></c></kcodes>
		<ktime line="7" static="1"><x path="Int"/></ktime>
		<init public="1" set="method" line="9" static="1"><f a=""><x path="Void"/></f></init>
		<onEnterFrame set="method" line="17" static="1"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></onEnterFrame>
		<onKey set="method" line="21" static="1"><f a="down:e">
	<x path="Bool"/>
	<c path="flash.events.KeyboardEvent"/>
	<x path="Void"/>
</f></onKey>
		<event public="1" set="method" line="25" static="1"><f a="code:down">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></event>
		<isDown public="1" set="method" line="30" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDown>
		<isToggled public="1" set="method" line="34" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isToggled>
	</class>
	<class path="utils.Math2" params="" file="src/utils/Math2.hx">
		<PI public="1" line="4" static="1"><x path="Float"/></PI>
		<SMALL public="1" line="5" static="1"><x path="Float"/></SMALL>
		<randomFloat public="1" get="inline" set="null" line="6" static="1"><f a="min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></randomFloat>
		<randomInt public="1" get="inline" set="null" line="9" static="1"><f a="min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></randomInt>
		<getLineLineIntersection public="1" set="method" line="14" static="1"><f a="ap1:ap2:bp1:bp2">
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></getLineLineIntersection>
		<getCloseIntersectPoint public="1" set="method" line="30" static="1"><f a="p:a:b">
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></getCloseIntersectPoint>
		<randomNorm public="1" set="method" line="49" static="1"><f a="mean:stddev">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></randomNorm>
		<powerCurve public="1" get="inline" set="null" line="63" static="1"><f a="start:end:rate:progress">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></powerCurve>
		<sign public="1" get="inline" set="null" line="67" static="1"><f a="x">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<boxMuller set="method" line="79" static="1"><f a=""><x path="Float"/></f></boxMuller>
		<randCache2 line="94" static="1"><x path="Float"/></randCache2>
		<useRandCache2 line="95" static="1"><x path="Bool"/></useRandCache2>
	</class>
	<class path="utils.Polygon" params="" file="src/utils/Polygon.hx">
		<edges public="1">
			<c path="Array"><c path="utils.Vec2"/></c>
			<meta><m n=":isVar"/></meta>
		</edges>
		<new public="1" set="method" line="7"><f a="edgesList">
	<c path="Array"><c path="utils.Vec2"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="utils.Vec2" params="" file="src/utils/Vec2.hx">
		<__rtti public="1" line="4" static="1"><c path="String"/></__rtti>
		<getVecArray public="1" get="inline" set="null" line="67" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><c path="utils.Vec2"/></c>
</f></getVecArray>
		<y public="1">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<x public="1">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</x>
		<toString public="1" get="inline" set="null" line="63"><f a=""><c path="String"/></f></toString>
		<cross public="1" get="inline" set="null" line="59"><f a="v">
	<c path="utils.Vec2"/>
	<x path="Float"/>
</f></cross>
		<dot public="1" get="inline" set="null" line="55"><f a="v">
	<c path="utils.Vec2"/>
	<x path="Float"/>
</f></dot>
		<lengthsq public="1" get="inline" set="null" line="51"><f a=""><x path="Float"/></f></lengthsq>
		<length public="1" get="inline" set="null" line="47"><f a=""><x path="Float"/></f></length>
		<normalize public="1" get="inline" set="null" line="43"><f a=""><c path="utils.Vec2"/></f></normalize>
		<scale public="1" get="inline" set="null" line="39"><f a="factor">
	<x path="Float"/>
	<c path="utils.Vec2"/>
</f></scale>
		<div public="1" get="inline" set="null" line="35"><f a="k">
	<x path="Float"/>
	<c path="utils.Vec2"/>
</f></div>
		<mul public="1" get="inline" set="null" line="31"><f a="k">
	<x path="Float"/>
	<c path="utils.Vec2"/>
</f></mul>
		<sub public="1" get="inline" set="null" line="27"><f a="rhs">
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></sub>
		<add public="1" get="inline" set="null" line="23"><f a="rhs">
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></add>
		<set public="1" set="method" line="18"><f a="v">
	<c path="utils.Vec2"/>
	<c path="utils.Vec2"/>
</f></set>
		<clone public="1" set="method" line="14"><f a=""><c path="utils.Vec2"/></f></clone>
		<new public="1" set="method" line="9"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":rtti"/></meta>
	</class>
	<class path="utils.Words" params="" file="src/utils/Words.hx"><wordsInOrder public="1" set="method" line="5" static="1"><f a="ordered:all">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
</f></wordsInOrder></class>
</haxe>