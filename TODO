Features
========

TODO cleanup (minimize and cut whenever possible)
    TODO simple clean up Controller-Model interaction
    TODO simple clean up Portal/Sector system ( verify syntax and logic consistency )
    TODO clean up Teract system
        take out dyn script for now
    TODO clean up debug input/output vs user input/output
        lay groundwork for user controller

DOIN serialize json object into entity with respective components
    TODO find a way to acquire managers at runtime from a string of text, or don't do it at all
    FUTR do we want to dynamically build components at runtime and be able to reference them?
    FUTR do we need a robust debugger for dynamic object creation via scripts?

TODO write Makefiles and buildscripts for faster iteration
    TODO make it so that fdb continues upon startup

TODO rewrite parser
    TODO first-pass rewrite: just take the user's input and translate to in-game command (do nothing smart)

TODO think about the hard stuffs
    TODO how to resolve player input? (Parser)
    TODO how to handle player input on the backend? (Parser/Model interaction)

TODO write simple parser to handle resolving player entities
    TODO implement MVP of entity-resolver
    TODO design some real-life potential synonyms
    TODO why is the SynListCmp basically a shell for SynTag (which is essentially another cmp)?

TODO design architecture for Teracts
    NOTE needs to be able to respond to match and not match and match but incorrect
    NOTE before we even get to Teracts we need to resolve player input into in-game entities

TODO design story-flow and state architecture
    Main plot flow -> Tree/DAG/Linked List
    Sub plot flow -> Separate tree/DAG/Linked List
    How to query plot flow? Query main module or use components
    OR decentralized story flow (components never share data)

TODO design game save mechanics and architecture
